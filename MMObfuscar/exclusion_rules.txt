SC2 Galaxy Script Natives Function Call Index
0x0 - void GalaxyNativeInvalid();
0x1 - void DebugString(string lp_1);
0x2 - void DebugUnit(unit lp_1);
0x3 - void DebugInt(int lp_1);
0x4 - void DebugFixed(fixed lp_1);
0x5 - void DebugPoint(point lp_1);
0x6 - void DebugDump(int lp_1);
0x7 - void AISetDifficulty(int lp_1, int lp_2, bool lp_3);
0x8 - bool AIGetDifficulty(int lp_1, int lp_2);
0x9 - void AIStart(int lp_1, bool lp_2, int lp_3);
0xA - void AIForceActive();
0xB - void AIDisableAllScouting();
0xC - bool AIGivingUp(int lp_1);
0xD - void AIGoodGame(int lp_1);
0xE - bool AIIsCampaign(int lp_1);
0xF - bool AIHasHumanAlly(int lp_1);
0x10 - void AISetAPM(int lp_1, int lp_2);
0x11 - unit AIGrabUnit(int lp_1, string lp_2, int lp_3, point lp_4);
0x12 - int AIState(int lp_1, int lp_2);
0x13 - void AISetSpecificState(int lp_1, int lp_2, int lp_3);
0x14 - void AISetAllStates(int lp_1, int lp_2);
0x15 - void AISetFlag(int lp_1, int lp_2, bool lp_3);
0x16 - bool AIGetFlag(int lp_1, int lp_2);
0x17 - void AITechFlag(int lp_1, int lp_2, int lp_3, string lp_4, int lp_5);
0x18 - void AIResetUserData(int lp_1);
0x19 - void AISetUserString(int lp_1, int lp_2, string lp_3);
0x1A - string AIGetUserString(int lp_1, int lp_2);
0x1B - void AISetUserInt(int lp_1, int lp_2, int lp_3);
0x1C - int AIGetUserInt(int lp_1, int lp_2);
0x1D - void AIAddStringInt(int lp_1, string lp_2, int lp_3);
0x1E - void AISetStockArmyDefaultScale(int lp_1, fixed lp_2);
0x1F - void AISetStockArmyOverride(int lp_1, string lp_2, int lp_3, string lp_4);
0x20 - void AIAddToStockArmy(int lp_1, string lp_2, int lp_3);
0x21 - void AIScaleCurrentStockArmy(int lp_1, fixed lp_2, int lp_3, int lp_4);
0x22 - fixed AIGetTime();
0x23 - int AIPathingCostMap(point lp_1, point lp_2);
0x24 - int AIPathingCostUnit(unit lp_1, point lp_2, bool lp_3);
0x25 - int AIPathDistToNearestKnownEnemyStructure(int lp_1, point lp_2, bool lp_3);
0x26 - int AIPathDistToNearestFriendlyStructure(int lp_1, point lp_2, bool lp_3);
0x27 - bool AICanPathToAnyKnownEnemyStructure(int lp_1, point lp_2, bool lp_3);
0x28 - void AIAddTeamRepresentative(int lp_1);
0x29 - void AITrackUnitDanger(unit lp_1);
0x2A - point AIPositionAlongPath(int lp_1, point lp_2, point lp_3, fixed lp_4, bool lp_5, bool lp_6);
0x2B - int AIGetTotalStartLocs();
0x2C - int AIGetGroundStartLocs(point lp_1);
0x2D - int AIGetAirStartLocs(point lp_1);
0x2E - int AIGetTotalTownLocs();
0x2F - int AIGetGroundTownLocs(point lp_1);
0x30 - int AIGetAirTownLocs(point lp_1);
0x31 - int AIRandomVal(int lp_1, int lp_2);
0x32 - void AINewChooseSubState(int lp_1, int lp_2, int lp_3, int lp_4, int lp_5);
0x33 - void AISetSubStateChance(int lp_1, int lp_2);
0x34 - void AISetSubStateChanceRace(int lp_1, int lp_2, int lp_3, int lp_4, int lp_5);
0x35 - int AIChooseSubState();
0x36 - bool AIWantsMultipleTransport(int lp_1);
0x37 - void AISetWantsMultipleTransport(int lp_1, bool lp_2);
0x38 - int AIGetNumMobileTransports(int lp_1);
0x39 - int AINumEnemyBuildings(int lp_1);
0x3A - int AINumEnemyBuildingsOnSharedIslands(int lp_1);
0x3B - int AINumEnemyBuildingsOnOtherIslands(int lp_1);
0x3C - bool AIEnemyBuildingsOnlyOnOtherIslands(int lp_1);
0x3D - point AIGetBestCreepSpot(int lp_1, unit lp_2, fixed lp_3);
0x3E - void AIAddDetectionDanger(int lp_1, string lp_2);
0x3F - bool AIDefaultSuspectDetectionDanger(int lp_1);
0x40 - void AIAddAirDanger(int lp_1, string lp_2);
0x41 - bool AIDefaultSuspectAirDanger(int lp_1);
0x42 - bool AIAnyWorkersFleeingNearby(int lp_1, point lp_2, fixed lp_3);
0x43 - int AIGetNumEnemies(int lp_1);
0x44 - int AIGetNumAllies(int lp_1);
0x45 - int AIGetNumTeams();
0x46 - int AIGetEnemyRaceVal(int lp_1);
0x47 - int AIGetSelfRaceVal(int lp_1);
0x48 - point AIPlacementNearbyFindTest(int lp_1, point lp_2, fixed lp_3, string lp_4);
0x49 - void AIAddToExtraScoutGroup(int lp_1, unit lp_2);
0x4A - bool AIOfferNewScout(int lp_1, unit lp_2);
0x4B - int AIGetNumWorkers(int lp_1);
0x4C - int AIGetNumDropoffs(int lp_1);
0x4D - int AIGetNumEstablishedTowns(int lp_1);
0x4E - void AIAddHealer(int lp_1, string lp_2, string lp_3, int lp_4);
0x4F - unit AIGetDropoffWithFewestGuards(int lp_1, string lp_2);
0x50 - bool AIHasNearbyAttackers(int lp_1, point lp_2, fixed lp_3);
0x51 - bool AIHasNearbyAlliedAttackers(int lp_1, point lp_2, fixed lp_3);
0x52 - bool AIHasNearbyAlliedDetector(int lp_1, point lp_2, fixed lp_3, fixed lp_4);
0x53 - point AIGetDirection(point lp_1, point lp_2);
0x54 - void AISetCoopFlag(int lp_1, int lp_2, bool lp_3);
0x55 - bool AIGetCoopFlag(int lp_1, int lp_2);
0x56 - point AIGetBuildingPlacement(int lp_1, point lp_2, string lp_3, int lp_4);
0x57 - bool AIAnyAllyAttacking(int lp_1);
0x58 - point AIBestAllyAttackPoint(int lp_1, wave lp_2);
0x59 - bool AIAnyAllyNeedsDefending(int lp_1, wave lp_2);
0x5A - point AIBestAllyDefendPoint(int lp_1, wave lp_2);
0x5B - void AIGlobalSuicide(int lp_1);
0x5C - wave AIUnitGetWave(unit lp_1);
0x5D - unitgroup AIWaveGetUnits(wave lp_1);
0x5E - unitgroup AIGetAllEscorts(unit lp_1);
0x5F - unitgroup AIGetAllEscortsGroup(unitgroup lp_1);
0x60 - void AIRemoveUnitFromAnyWaves(unit lp_1);
0x61 - void AIRemoveGroupFromAnyWaves(unitgroup lp_1);
0x62 - void AIRemoveUnitFromAnyWavesAndSetHome(unit lp_1, point lp_2);
0x63 - void AIRemoveGroupFromAnyWavesAndSetHome(unitgroup lp_1, point lp_2);
0x64 - unitgroup AIGetUnitsInWavesWithTarget(int lp_1, wavetarget lp_2);
0x65 - bool AIIsScriptControlled(unit lp_1);
0x66 - void AISetUnitScriptControlled(unit lp_1, bool lp_2);
0x67 - void AISetGroupScriptControlled(unitgroup lp_1, bool lp_2);
0x68 - bool AIIsSuicideUnit(unit lp_1);
0x69 - void AISetUnitSuicide(unit lp_1, bool lp_2);
0x6A - void AISetGroupSuicide(unitgroup lp_1, bool lp_2);
0x6B - bool AIIsTacticalDisabled(unit lp_1);
0x6C - void AISetUnitTacticalDisabled(unit lp_1, bool lp_2);
0x6D - void AISetGroupTacticalDisabled(unitgroup lp_1, bool lp_2);
0x6E - bool AIIsObjectGroupUnit(unit lp_1);
0x6F - bool AIIsNotUsableInWaves(unit lp_1);
0x70 - void AISetUnitNotUsableInWaves(unit lp_1, bool lp_2);
0x71 - void AISetGroupNotUsableInWaves(unitgroup lp_1, bool lp_2);
0x72 - void AISetWantsToUpgrade(unit lp_1);
0x73 - void AISetUnitAvoidEnemyGates(unit lp_1, bool lp_2);
0x74 - void AISetUnitForceMover(unit lp_1, bool lp_2);
0x75 - void AISetGroupForceMover(unitgroup lp_1, bool lp_2);
0x76 - void AIInitCampaignTowns(int lp_1);
0x77 - void AIInitCampaignHarvest(int lp_1);
0x78 - void AIDeclareTown(int lp_1, int lp_2, point lp_3);
0x79 - int AIGetMainTown(int lp_1);
0x7A - void AISetMainTown(int lp_1, int lp_2);
0x7B - void AIUpdateMainTown(int lp_1);
0x7C - bool AIIsTownFull(int lp_1, int lp_2);
0x7D - int AIGetTownState(int lp_1, int lp_2);
0x7E - fixed AIGetTownEstablishedTime(int lp_1, int lp_2);
0x7F - point AIGetTownLocation(int lp_1, int lp_2);
0x80 - int AIGetClosestTown(int lp_1, point lp_2);
0x81 - int AIGetNextUnusedTownSlot(int lp_1);
0x82 - int AIGetBuildingCountInTown(int lp_1, int lp_2, string lp_3, int lp_4);
0x83 - bool AIIsTownHarvestRunning(int lp_1, int lp_2);
0x84 - void AIHarvest(int lp_1, int lp_2);
0x85 - void AIHarvestRate(int lp_1, int lp_2);
0x86 - void AIHarvestBonus(int lp_1, fixed lp_2);
0x87 - void AISetGasPeonCountOverride(int lp_1, int lp_2, int lp_3);
0x88 - int AIGetCurPeonCount(int lp_1, int lp_2);
0x89 - int AIGetMinPeonCount(int lp_1, int lp_2);
0x8A - int AIGetMaxPeonCount(int lp_1, int lp_2);
0x8B - int AIGetMineralAmountLeft(int lp_1, int lp_2);
0x8C - int AIGetGasAmountLeft(int lp_1, int lp_2);
0x8D - int AIGetMineralNumSpots(int lp_1, int lp_2);
0x8E - int AIGetHarvestableGasNumSpots(int lp_1, int lp_2);
0x8F - int AIGetRawGasNumSpots(int lp_1, int lp_2);
0x90 - point AIGetGatherLocation(int lp_1, int lp_2);
0x91 - point AIGetGatherDefLocation(int lp_1, int lp_2);
0x92 - int AIExpand(int lp_1, point lp_2, string lp_3);
0x93 - unitgroup AIGetTownThreats(int lp_1, int lp_2);
0x94 - unit AIGetObstruction(int lp_1);
0x95 - bool AIHasNearbyOpenExpansion(int lp_1);
0x96 - void AIScout(int lp_1);
0x97 - void AISetNumScouts(int lp_1, int lp_2);
0x98 - void AISetScoutTimes(int lp_1, int lp_2, int lp_3, int lp_4, int lp_5);
0x99 - point AIGetNextScoutLoc(int lp_1);
0x9A - void AIClearCampaignScout(int lp_1);
0x9B - void AIEarlyDefenseEnable(int lp_1, bool lp_2, bool lp_3);
0x9C - void AIEarlyDefenseProps(int lp_1, fixed lp_2, fixed lp_3, fixed lp_4);
0x9D - void AIBuild(int lp_1, int lp_2, int lp_3, string lp_4, int lp_5, int lp_6);
0x9E - void AITrain(int lp_1, int lp_2, int lp_3, string lp_4, int lp_5);
0x9F - void AIResearch(int lp_1, int lp_2, int lp_3, string lp_4);
0xA0 - void AIMakeAlways(int lp_1, int lp_2, int lp_3, string lp_4, int lp_5);
0xA1 - void AIMakeOnce(int lp_1, int lp_2, int lp_3, string lp_4, int lp_5);
0xA2 - void AIClearBuildQueue(int lp_1);
0xA3 - void AIClearTrainQueue(int lp_1);
0xA4 - void AIClearResearchQueue(int lp_1);
0xA5 - int AIGetInternalTrainQueueCount(int lp_1);
0xA6 - int AIGetInternalBuildQueueCount(int lp_1);
0xA7 - int AIGetInternalResearchQueueCount(int lp_1);
0xA8 - bool AIHasRes(int lp_1, int lp_2, int lp_3);
0xA9 - int AITechCount(int lp_1, string lp_2, int lp_3);
0xAA - void AITechCountFixupSingle(int lp_1, string lp_2, string lp_3);
0xAB - void AITechCountFixupEither(int lp_1, string lp_2, string lp_3, string lp_4);
0xAC - void AITechCountFixupInOrder(int lp_1, string lp_2, string lp_3, string lp_4);
0xAD - int AIKnownUnitCount(int lp_1, int lp_2, string lp_3);
0xAE - void AIResetCounterUnits(int lp_1);
0xAF - void AICounterUnitSetup(int lp_1, string lp_2, fixed lp_3, string lp_4, fixed lp_5, string lp_6);
0xB0 - int AICounterUnitsSameTech(int lp_1, int lp_2, string lp_3);
0xB1 - int AICounterUnitsSameTechAdjusted(int lp_1, int lp_2, string lp_3);
0xB2 - int AICounterUnitsAnyTech(int lp_1, int lp_2, string lp_3);
0xB3 - fixed AIFoodCost(int lp_1, string lp_2);
0xB4 - point AIGetRallyPoint(unit lp_1);
0xB5 - void AISetDefaultArmyUnit(int lp_1, string lp_2);
0xB6 - void AISetDefaultTownHall(int lp_1, string lp_2);
0xB7 - void AISetPowerBuilding(int lp_1, string lp_2);
0xB8 - void AISetCreepBuilding(int lp_1, string lp_2, string lp_3);
0xB9 - void AIForceTrainingDelay(int lp_1, int lp_2, int lp_3, int lp_4);
0xBA - void AIClearStock(int lp_1);
0xBB - void AIEnableStock(int lp_1);
0xBC - void AISetStockEx(int lp_1, int lp_2, int lp_3, string lp_4, int lp_5, int lp_6);
0xBD - void AISetStock(int lp_1, int lp_2, string lp_3);
0xBE - void AISetStockOpt(int lp_1, int lp_2, string lp_3);
0xBF - void AISetStockUnitNext(int lp_1, int lp_2, string lp_3, bool lp_4);
0xC0 - bool AISetStockTown(int lp_1, string lp_2, string lp_3);
0xC1 - bool AISetStockExpand(int lp_1, string lp_2, int lp_3);
0xC2 - void AISetStockExtra(int lp_1, int lp_2, string lp_3, int lp_4);
0xC3 - void AISetStockFarms(int lp_1, string lp_2, bool lp_3);
0xC4 - void AISetStockPeons(int lp_1, int lp_2, string lp_3, bool lp_4, bool lp_5);
0xC5 - void AINewTechStock(int lp_1);
0xC6 - void AITechStockAdd(string lp_1);
0xC7 - void AISetStockTechNext(int lp_1);
0xC8 - void AISetStockTechNextUnCap(int lp_1, int lp_2, int lp_3);
0xC9 - void AIDefaultEconomy(int lp_1, string lp_2, string lp_3, string lp_4, string lp_5, int lp_6, bool lp_7);
0xCA - void AIDefaultExpansion(int lp_1, string lp_2, int lp_3, int lp_4, int lp_5);
0xCB - void AIClearLimitTech(int lp_1);
0xCC - void AILimitTech(int lp_1, int lp_2, int lp_3, int lp_4, int lp_5, int lp_6, int lp_7);
0xCD - void AIImportantTech(int lp_1, string lp_2);
0xCE - void AILimitStockLarva(int lp_1, string lp_2);
0xCF - bool AIHasStock(int lp_1);
0xD0 - bool AIHasStockFromTown(int lp_1, int lp_2);
0xD1 - void AIRemoveStockFromTown(int lp_1, int lp_2);
0xD2 - int AIDefaultGetObjectType(int lp_1, string lp_2);
0xD3 - string AIDefaultGetMaker(int lp_1, string lp_2);
0xD4 - string AIDefaultGetFirstMissingReq(int lp_1, string lp_2);
0xD5 - string AIDefaultGetFirstUnfinishedReq(int lp_1, string lp_2);
0xD6 - int AIDefaultGetFullMakeTime(int lp_1, string lp_2);
0xD7 - string AIGetBaseName(string lp_1);
0xD8 - string AIGetBuildAtName(string lp_1);
0xD9 - void AIReqCountAsBuiltObject(int lp_1, string lp_2);
0xDA - void AIReqAddSpecialMaker(string lp_1, string lp_2, string lp_3, int lp_4);
0xDB - void AISetNukeNukeCastTime(int lp_1, fixed lp_2);
0xDC - void AISetNukeCloakCost(int lp_1, fixed lp_2);
0xDD - void AISetNukeCloakRegenRate(int lp_1, fixed lp_2);
0xDE - void AISetNukeGhost(int lp_1, string lp_2);
0xDF - void AISetNukeNukeEffect(int lp_1, string lp_2);
0xE0 - void AISetNukeCloak(int lp_1, string lp_2);
0xE1 - void AISetNukeNukeAbilLink(int lp_1, string lp_2);
0xE2 - void AISetNukeCloakAbilLink(int lp_1, string lp_2);
0xE3 - void AISetNukeDamage(int lp_1, fixed lp_2, fixed lp_3);
0xE4 - void AISetNukeRadiusClose(int lp_1, fixed lp_2, fixed lp_3);
0xE5 - void AISetNukeRadiusMedium(int lp_1, fixed lp_2, fixed lp_3);
0xE6 - void AISetNukeRadiusFar(int lp_1, fixed lp_2, fixed lp_3);
0xE7 - void AIBaseThink(unit lp_1, unitgroup lp_2);
0xE8 - bool AIEvalTacticalData(unit lp_1, string lp_2);
0xE9 - void AIExecuteAbilTactical(unit lp_1, string lp_2, unitgroup lp_3, string lp_4, unit lp_5);
0xEA - int AICast(unit lp_1, order lp_2, marker lp_3, bool lp_4);
0xEB - int AICastFlee(unit lp_1, unit lp_2, int lp_3, marker lp_4);
0xEC - int AICastCooldown(unit lp_1, order lp_2, marker lp_3, bool lp_4, int lp_5, fixed lp_6);
0xED - int AISetCooldown(unit lp_1, int lp_2, fixed lp_3);
0xEE - bool AITactCooldownAllow(unit lp_1, int lp_2);
0xEF - void AICooldownSetupAbil(string lp_1, string lp_2, int lp_3, bool lp_4, fixed lp_5);
0xF0 - int AICastCooldownAbil(unit lp_1, order lp_2, marker lp_3, bool lp_4, string lp_5);
0xF1 - int AISetCooldownAbil(unit lp_1, string lp_2);
0xF2 - bool AITactCooldownAllowAbil(unit lp_1, string lp_2);
0xF3 - bool AINearbyUnits(int lp_1, string lp_2, point lp_3, fixed lp_4, int lp_5);
0xF4 - unitgroup AIFindUnits(int lp_1, string lp_2, point lp_3, fixed lp_4, int lp_5);
0xF5 - bool AISameCommand(unit lp_1, unit lp_2);
0xF6 - unit AILastAttacker(unit lp_1);
0xF7 - int AILastAttack(unit lp_1);
0xF8 - bool AIControlWantsToMove(unit lp_1);
0xF9 - bool AIControlForceToMove(unit lp_1);
0xFA - bool AIControlWantsToUnburrow(unit lp_1);
0xFB - bool AIControlWantsToBurrow(unit lp_1);
0xFC - bool AIControlForceUnburrow(unit lp_1);
0xFD - bool AIUnitIsInCombat(unit lp_1);
0xFE - bool AIIsIgnoredByWave(unit lp_1);
0xFF - void AISetIgnoredByWave(unit lp_1, bool lp_2);
0x100 - point AIGetHomePosition(unit lp_1);
0x101 - point AIGetCloakedAttacker(int lp_1);
0x102 - void AIClearCloakedAttacker(int lp_1, point lp_2);
0x103 - bool AISawCloakedUnit(int lp_1);
0x104 - point AISelfReinforceDropPoint(int lp_1);
0x105 - point AIRandomSpawnPoint(int lp_1, region lp_2, fixed lp_3, fixed lp_4, fixed lp_5);
0x106 - point AIBestTargetPoint(unitgroup lp_1, int lp_2, int lp_3, fixed lp_4, fixed lp_5, point lp_6, fixed lp_7, int lp_8);
0x107 - aifilter AIFilter(int lp_1);
0x108 - void AISetFilterAlliance(aifilter lp_1, int lp_2);
0x109 - void AISetFilterMarker(aifilter lp_1, int lp_2, int lp_3, marker lp_4);
0x10A - void AISetFilterSelf(aifilter lp_1, unit lp_2);
0x10B - void AISetFilterBits(aifilter lp_1, unitfilter lp_2);
0x10C - void AISetFilterRange(aifilter lp_1, unit lp_2, fixed lp_3);
0x10D - void AISetFilterInCombat(aifilter lp_1, bool lp_2);
0x10E - void AISetFilterLife(aifilter lp_1, fixed lp_2, fixed lp_3);
0x10F - void AISetFilterLifeLost(aifilter lp_1, fixed lp_2, fixed lp_3);
0x110 - void AISetFilterLifePercent(aifilter lp_1, fixed lp_2, fixed lp_3);
0x111 - void AISetFilterLifeSortReference(aifilter lp_1, fixed lp_2, fixed lp_3);
0x112 - void AISetFilterLifeMod(aifilter lp_1, int lp_2, fixed lp_3);
0x113 - void AISetFilterLifePerMarker(aifilter lp_1, fixed lp_2, marker lp_3);
0x114 - void AISetFilterShields(aifilter lp_1, fixed lp_2, fixed lp_3);
0x115 - void AISetFilterEnergy(aifilter lp_1, fixed lp_2, fixed lp_3);
0x116 - void AISetFilterPlane(aifilter lp_1, int lp_2);
0x117 - void AISetFilterCanAttackEnemy(aifilter lp_1, int lp_2, int lp_3);
0x118 - void AISetFilterCanAttackAlly(aifilter lp_1, bool lp_2, bool lp_3);
0x119 - void AISetFilterBehaviorCount(aifilter lp_1, int lp_2, int lp_3, string lp_4);
0x11A - void AISetFilterMelee(aifilter lp_1, bool lp_2);
0x11B - void AISetFilterValidPassenger(aifilter lp_1, unit lp_2);
0x11C - unitgroup AIGetFilterGroup(aifilter lp_1, unitgroup lp_2);
0x11D - unitgroup AIFilterGathering(unitgroup lp_1, int lp_2, fixed lp_3);
0x11E - unitgroup AIFilterPathable(unitgroup lp_1, point lp_2);
0x11F - unitgroup AIFilterCasters(unitgroup lp_1);
0x120 - unitgroup AIFilterProduction(unitgroup lp_1, bool lp_2);
0x121 - unitgroup AIGetBuildingGroup(int lp_1, int lp_2);
0x122 - unitgroup AIGetWorkers(int lp_1);
0x123 - unit AIGetClosestUnit(unit lp_1, unitgroup lp_2, bool lp_3);
0x124 - bool AICloakEvaluate(unit lp_1, fixed lp_2, fixed lp_3, fixed lp_4);
0x125 - void AIForceTacticalDelay(int lp_1, int lp_2);
0x126 - void AISetTacticalAttackTargetPoint(unit lp_1, point lp_2);
0x127 - void AISetTacticalAttackTargetUnit(unit lp_1, unit lp_2);
0x128 - order AIUnitGroupGetValidOrder(unitgroup lp_1, order lp_2, unit lp_3, bool lp_4);
0x129 - bool AIIsFollowingUnit(unit lp_1, string lp_2);
0x12A - int AIGetPlayerGroup(unitgroup lp_1);
0x12B - bool AINearbyPlaneTest(point lp_1, int lp_2, fixed lp_3, int lp_4, int lp_5);
0x12C - fixed AIUnitGroupStrength(unitgroup lp_1);
0x12D - fixed AIAllyEnemyRatio(int lp_1, point lp_2, unitfilter lp_3, fixed lp_4, fixed lp_5);
0x12E - bool AIUnitGroupHasRanged(unitgroup lp_1);
0x12F - bool AIUnitGroupHasMelee(unitgroup lp_1);
0x130 - void AISetMaxBestAttackersLimit(int lp_1, int lp_2);
0x131 - unit AIDefaultCombatPriority(unitgroup lp_1, unitgroup lp_2, int lp_3);
0x132 - bool AICombatDiffFlagCatSpecialHighPrio(int lp_1, int lp_2);
0x133 - bool AICombatDiffFlagCatSplashHighPrio(int lp_1, int lp_2);
0x134 - bool AICombatDiffFlagCatTimedLowPrio(int lp_1, int lp_2);
0x135 - bool AICombatDiffFlagCatWorkersNormalPrio(int lp_1, int lp_2);
0x136 - bool AICombatDiffFlagCatSortBuildingsPrio(int lp_1, int lp_2);
0x137 - bool AICombatDiffFlagTieBreakHealers(int lp_1, int lp_2);
0x138 - bool AICombatDiffFlagTieBreakBonusDamage(int lp_1, int lp_2);
0x139 - bool AICombatDiffFlagTieBreakLowHP(int lp_1, int lp_2);
0x13A - bool AICombatDiffFlagTieBreakInjured(int lp_1, int lp_2);
0x13B - bool AICombatDiffFlagTieBreakDetector(int lp_1, int lp_2);
0x13C - bool AICombatDiffFlagTieBreakRange(int lp_1, int lp_2);
0x13D - void AISetSpawnerTargettingDelay(int lp_1, string lp_2, int lp_3);
0x13E - void AITransportIgnore(int lp_1, string lp_2);
0x13F - void AITransportSetPanic(int lp_1, fixed lp_2);
0x140 - void AITransportSetReturn(int lp_1, point lp_2);
0x141 - void AITransportDisableAutoPickup(int lp_1);
0x142 - void AISetDefenseRadii(int lp_1, fixed lp_2, fixed lp_3, fixed lp_4);
0x143 - waveinfo AIWaveInfoCreate();
0x144 - waveinfo AIWaveInfo(wave lp_1);
0x145 - void AIWaveInfoAdd(waveinfo lp_1, string lp_2, int lp_3);
0x146 - int AIWaveInfoAttack(waveinfo lp_1, int lp_2, point lp_3, wavetarget lp_4, int lp_5);
0x147 - int AIWaveInfoSuicide(waveinfo lp_1, int lp_2, point lp_3, wavetarget lp_4, int lp_5);
0x148 - int AIWaveInfoScout(waveinfo lp_1, int lp_2, point lp_3, int lp_4);
0x149 - string AIWaveToString(wave lp_1);
0x14A - text AIWaveToText(wave lp_1);
0x14B - wave AIWaveCreate(waveinfo lp_1, int lp_2, point lp_3);
0x14C - void AIWaveAddUnit(wave lp_1, unit lp_2);
0x14D - void AIWaveAddUnitPriority(wave lp_1, unit lp_2, int lp_3);
0x14E - void AIWaveRemoveUnit(wave lp_1, unit lp_2);
0x14F - int AIWaveUnitCount(wave lp_1);
0x150 - int AIWaveDetectorCount(wave lp_1);
0x151 - void AIWaveSetType(wave lp_1, int lp_2, wavetarget lp_3);
0x152 - int AIWaveState(wave lp_1);
0x153 - point AIWaveGoal(wave lp_1);
0x154 - unit AIWaveCurrentLeader(wave lp_1);
0x155 - void AIWaveDelete(wave lp_1);
0x156 - wavetarget AIWaveTargetUnit(unit lp_1);
0x157 - wavetarget AIWaveTargetUnitGroup(unitgroup lp_1);
0x158 - wavetarget AIWaveTargetUnitPoint(unit lp_1);
0x159 - wavetarget AIWaveTargetPoint(point lp_1);
0x15A - wavetarget AIWaveTargetPlayer(playergroup lp_1);
0x15B - wavetarget AIWaveTargetMelee(int lp_1);
0x15C - wavetarget AIWaveTargetMeleeBeacon(int lp_1);
0x15D - wavetarget AIWaveTargetMeleeHarass(int lp_1);
0x15E - wavetarget AIWaveTargetMeleeDrop(int lp_1, point lp_2, point lp_3);
0x15F - wavetarget AIWaveTargetMeleeDefend(int lp_1);
0x160 - wavetarget AIWaveTargetMerge(wave lp_1);
0x161 - wavetarget AIWaveTargetPatrol(int lp_1);
0x162 - wavetarget AIWaveTargetEscort(unitgroup lp_1, int lp_2);
0x163 - wavetarget AIWaveTargetEscortNL(unitgroup lp_1, int lp_2);
0x164 - wavetarget AIWaveTargetGatherO(int lp_1, int lp_2);
0x165 - wavetarget AIWaveTargetGatherD(int lp_1, int lp_2);
0x166 - wavetarget AIWaveTargetRegion(region lp_1, int lp_2);
0x167 - point AIWaveTargetGatherOPoint(int lp_1, int lp_2);
0x168 - point AIWaveTargetGatherDPoint(int lp_1, int lp_2);
0x169 - wavetarget AIWaveTargetGuardHomeUnit(unit lp_1);
0x16A - wavetarget AIWaveTargetGatherMelee(int lp_1);
0x16B - unit AIWaveTargetGetUnit(wavetarget lp_1);
0x16C - unitgroup AIWaveTargetGetUnitGroup(wavetarget lp_1);
0x16D - wavetarget AIWaveHarassRetreat(int lp_1, wave lp_2, fixed lp_3);
0x16E - wavetarget AIWaveGetTarget(wave lp_1);
0x16F - bool AIWaveIsInCombat(wave lp_1);
0x170 - int AIWaveGetTimeInCombat(wave lp_1);
0x171 - int AIWaveGetTimeSinceCombat(wave lp_1);
0x172 - int AIWaveGetTimeSinceOrdered(wave lp_1);
0x173 - int AIWaveGetTimeSinceRetreat(wave lp_1);
0x174 - bool AIShouldHelpUserAlly(int lp_1, wave lp_2);
0x175 - point AIGetBestUserAllyHelpLocation(int lp_1, wave lp_2);
0x176 - bool AIDefenseThreat(int lp_1, int lp_2, wave lp_3);
0x177 - int AISelfDefenseThreatEval(int lp_1, int lp_2);
0x178 - int AIWaveEval(wave lp_1);
0x179 - int AIWaveEvalRatio(wave lp_1, fixed lp_2);
0x17A - int AIUnitAreaEvalRatio(unit lp_1, fixed lp_2);
0x17B - int AIEvalRatio(int lp_1);
0x17C - void AIEvalSetCustomIndex(int lp_1);
0x17D - int AIEvalAllSelf(int lp_1);
0x17E - int AIEvalAllAllied(int lp_1);
0x17F - int AIEvalLargestEnemy(int lp_1);
0x180 - int AILastWaveEvalStaticRatio();
0x181 - void AIWaveTargetAddWaypoint(wavetarget lp_1, point lp_2, bool lp_3, int lp_4);
0x182 - void AIWaveTargetClearWaypoints(wavetarget lp_1);
0x183 - wave AIWaveGet(int lp_1, int lp_2);
0x184 - void AIWaveSet(int lp_1, int lp_2, wave lp_3);
0x185 - int AIWaveType(wave lp_1);
0x186 - void AIWaveSetUserData(wave lp_1, int lp_2, int lp_3);
0x187 - int AIWaveGetUserData(wave lp_1, int lp_2);
0x188 - void AIWaveSetDeleteWhenEmpty(wave lp_1, bool lp_2);
0x189 - void AIWaveMerge(int lp_1, int lp_2, int lp_3);
0x18A - void AIWaveMergeMelee(int lp_1);
0x18B - wave WaveLastCreated();
0x18C - point AIGetBestTarget(int lp_1, playergroup lp_2, point lp_3, int lp_4);
0x18D - bool AIFindDropAttackTarget(int lp_1, point lp_2);
0x18E - point AILastDropLocation();
0x18F - point AILastDropGoal();
0x190 - fixed AIGetNextDropTimeCheck(int lp_1);
0x191 - void AISetNextDropTimeCheck(int lp_1, fixed lp_2);
0x192 - int AILastAttackRatio(wave lp_1);
0x193 - int AILastAttackStartEval(wave lp_1);
0x194 - void AIDefaultMeleeSplitArmyToDefend(int lp_1, wave lp_2, int lp_3);
0x195 - void AIAttackWaveAddUnits(int lp_1, int lp_2, string lp_3);
0x196 - int AIAttackWaveSend(int lp_1, int lp_2, bool lp_3);
0x197 - void AIAttackWaveCancel(wave lp_1);
0x198 - void AIAttackWaveSetGatherPoint(int lp_1, point lp_2);
0x199 - void AIAttackWaveUseUnit(int lp_1, unit lp_2);
0x19A - void AIAttackWaveUseGroup(int lp_1, unitgroup lp_2);
0x19B - void AIAttackWaveAddEscortUnit(int lp_1, unit lp_2, unit lp_3, fixed lp_4, fixed lp_5);
0x19C - void AIAttackWaveAddEscortType(int lp_1, string lp_2, unit lp_3, fixed lp_4, fixed lp_5);
0x19D - void AIAttackWaveSetTargetUnit(int lp_1, unit lp_2);
0x19E - void AIAttackWaveSetTargetUnitGroup(int lp_1, unitgroup lp_2);
0x19F - void AIAttackWaveSetTargetUnitPoint(int lp_1, unit lp_2);
0x1A0 - void AIAttackWaveSetTargetPoint(int lp_1, point lp_2);
0x1A1 - void AIAttackWaveSetTargetPlayer(int lp_1, playergroup lp_2);
0x1A2 - void AIAttackWaveSetTargetMelee(int lp_1);
0x1A3 - void AIAttackWaveSetTargetMeleeHarass(int lp_1);
0x1A4 - void AIAttackWaveSetTargetMeleeDrop(int lp_1, point lp_2, point lp_3);
0x1A5 - void AIAttackWaveSetTargetMeleeDefend(int lp_1);
0x1A6 - void AIAttackWaveSetTargetMerge(int lp_1, wave lp_2);
0x1A7 - void AIAttackWaveSetTargetPatrol(int lp_1, int lp_2);
0x1A8 - void AIAttackWaveSetTargetEscort(int lp_1, unitgroup lp_2, int lp_3);
0x1A9 - void AIAttackWaveSetTargetEscortNL(int lp_1, unitgroup lp_2, int lp_3);
0x1AA - void AIAttackWaveSetTargetGatherO(int lp_1, int lp_2);
0x1AB - void AIAttackWaveSetTargetGatherD(int lp_1, int lp_2);
0x1AC - void AIAttackWaveSetTargetRegion(int lp_1, region lp_2, int lp_3);
0x1AD - void AIAttackWaveSetGatherEarlyNoReplace(int lp_1);
0x1AE - void AIAttackWaveSetKeepAlive(int lp_1);
0x1AF - void AIAttackWaveAddWaypoint(int lp_1, point lp_2, bool lp_3);
0x1B0 - void AIAttackWaveClearWaypoints(int lp_1);
0x1B1 - void AISetMinimumBullyCount(int lp_1, string lp_2, int lp_3);
0x1B2 - void AISetGeneralRebuildCount(int lp_1, bool lp_2, int lp_3);
0x1B3 - void AISetSpecificRebuildCount(int lp_1, string lp_2, int lp_3);
0x1B4 - void AISetBullyRebuildDelay(fixed lp_1, fixed lp_2, int lp_3);
0x1B5 - void AISetBullyAttackWavePercent(int lp_1, int lp_2);
0x1B6 - void AINearestTownLimitWaveGather(int lp_1, bool lp_2);
0x1B7 - void AINearestTownBullyRebuild(int lp_1, bool lp_2);
0x1B8 - void AIToggleBulliesInRegion(int lp_1, region lp_2, bool lp_3);
0x1B9 - void AIResetBullyRebuildCountsInRegion(int lp_1, region lp_2);
0x1BA - void AIClearAllBullies(int lp_1);
0x1BB - void AIAddBully(int lp_1, string lp_2, point lp_3, int lp_4);
0x1BC - string AIGetBullyType(unit lp_1);
0x1BD - void AILaneWaypointClearAll();
0x1BE - void AILaneWaypointAdd(int lp_1, point lp_2);
0x1BF - int AILaneWaypointGetClosestLane(point lp_1);
0x1C0 - point AILaneWaypointGetWaypointPosWithOffset(int lp_1, int lp_2, fixed lp_3);
0x1C1 - fixed AILaneWaypointConvertPointToWaydist(int lp_1, int lp_2, int lp_3, point lp_4);
0x1C2 - point AILaneWaypointConvertWaydistOffsetToPoint(int lp_1, fixed lp_2, fixed lp_3);
0x1C3 - void AILaneWaypointCalcClosestDataForLane(int lp_1, point lp_2);
0x1C4 - int AILaneWaypointGetCalcDataClosestWaypointIndex();
0x1C5 - int AILaneWaypointGetCalcDataSecondWaypointIndex();
0x1C6 - point AILaneWaypointGetCalcDataClosestPoint();
0x1C7 - fixed AILaneWaypointGetCalcDataClosestDist();
0x1C8 - void AchievementAward(int lp_1, string lp_2);
0x1C9 - void AchievementErase(int lp_1, string lp_2);
0x1CA - void AchievementPanelSetCategory(playergroup lp_1, string lp_2);
0x1CB - void AchievementPanelSetVisible(playergroup lp_1, bool lp_2);
0x1CC - text AchievementPercentText(int lp_1, string lp_2);
0x1CD - void AchievementTermQuantitySet(int lp_1, string lp_2, int lp_3);
0x1CE - void AchievementTermQuantityAdd(int lp_1, string lp_2, int lp_3);
0x1CF - void AchievementsDisable(int lp_1);
0x1D0 - bool AchievementsDisabled(int lp_1);
0x1D1 - actorscope ActorScopeCreate(string lp_1);
0x1D2 - actorscope ActorScopeLastCreated();
0x1D3 - actorscope ActorScopeLastCreatedSend();
0x1D4 - actorscope ActorScopeFrom(string lp_1);
0x1D5 - actorscope ActorScopeFromActor(actor lp_1);
0x1D6 - actorscope ActorScopeFromUnit(unit lp_1);
0x1D7 - actorscope ActorScopeFromPortrait(int lp_1);
0x1D8 - actorscope ActorScopeFromDialogControl(int lp_1);
0x1D9 - text ActorScopeGetText(actorscope lp_1);
0x1DA - void ActorScopeKill(actorscope lp_1);
0x1DB - void ActorScopeOrphan(actorscope lp_1);
0x1DC - actor ActorScopeRefGet(actorscope lp_1, string lp_2);
0x1DD - void ActorScopeRefSet(actorscope lp_1, string lp_2, actor lp_3);
0x1DE - void ActorScopeSend(actorscope lp_1, string lp_2);
0x1DF - void ActorScopeMoveTo(actorscope lp_1, actor lp_2);
0x1E0 - actor ActorCreate(actorscope lp_1, string lp_2, string lp_3, string lp_4, string lp_5);
0x1E1 - actor ActorLastCreated();
0x1E2 - actor ActorLastCreatedSend();
0x1E3 - actor ActorFrom(string lp_1);
0x1E4 - actor ActorFromActor(actor lp_1, string lp_2);
0x1E5 - actor ActorFromScope(actorscope lp_1, string lp_2);
0x1E6 - actor ActorFromDoodad(doodad lp_1);
0x1E7 - actor ActorFromPortrait(int lp_1);
0x1E8 - actor ActorFromDialogControl(int lp_1);
0x1E9 - text ActorGetText(actor lp_1);
0x1EA - actor ActorRefGet(actor lp_1, string lp_2);
0x1EB - void ActorRefSet(actor lp_1, string lp_2, actor lp_3);
0x1EC - void ActorSend(actor lp_1, string lp_2);
0x1ED - void ActorSendAsText(actor lp_1, text lp_2);
0x1EE - void ActorSendTo(actor lp_1, string lp_2, string lp_3);
0x1EF - void ActorSendToAsText(actor lp_1, string lp_2, text lp_3);
0x1F0 - void ActorLookAtStart(actor lp_1, string lp_2, int lp_3, fixed lp_4, actor lp_5);
0x1F1 - void ActorLookAtStop(actor lp_1, string lp_2, int lp_3, fixed lp_4);
0x1F2 - void ActorLookAtTypeStart(actor lp_1, string lp_2, actor lp_3);
0x1F3 - void ActorLookAtTypeStop(actor lp_1, string lp_2);
0x1F4 - void ActorTextureGroupApplyGlobal(string lp_1);
0x1F5 - void ActorTextureGroupRemoveGlobal(string lp_1);
0x1F6 - void ActorTextureGroupPush();
0x1F7 - void ActorTextureGroupPop();
0x1F8 - void ActorWorldParticleFXDestroy();
0x1F9 - actor ActorRegionCreate(actorscope lp_1, string lp_2, region lp_3);
0x1FA - void ActorRegionSend(actor lp_1, int lp_2, string lp_3, string lp_4, string lp_5);
0x1FB - void ActorAddOrientUpdate(string lp_1, int lp_2);
0x1FC - string MakeMsgAnimBracketResume(string lp_1, int lp_2, fixed lp_3, int lp_4);
0x1FD - string MakeMsgAnimBracketStart(string lp_1, string lp_2, string lp_3, string lp_4, int lp_5, fixed lp_6, int lp_7);
0x1FE - string MakeMsgAnimBracketStop(string lp_1, int lp_2, fixed lp_3, int lp_4);
0x1FF - string MakeMsgAnimGroupApply(string lp_1, string lp_2, string lp_3, int lp_4, fixed lp_5, int lp_6);
0x200 - string MakeMsgAnimGroupRemove(string lp_1, int lp_2, fixed lp_3, int lp_4);
0x201 - string MakeMsgAnimPlay(string lp_1, string lp_2, int lp_3, fixed lp_4, fixed lp_5, fixed lp_6, int lp_7);
0x202 - string MakeMsgRefCreate(string lp_1);
0x203 - string MakeMsgRefSetFromRequest(string lp_1, string lp_2, string lp_3, int lp_4, int lp_5);
0x204 - string MakeMsgRefTableDump(int lp_1);
0x205 - string MakeMsgSetPhysicsState(int lp_1, fixed lp_2, fixed lp_3);
0x206 - string MakeMsgTextureSelectByMatch(string lp_1, int lp_2, string lp_3, int lp_4);
0x207 - string MakeMsgTextureSelectBySlot(string lp_1, int lp_2, string lp_3);
0x208 - string MakeMsgTextureVideoPlay(string lp_1, int lp_2, int lp_3, int lp_4, int lp_5, string lp_6);
0x209 - string MakeMsgTextureVideoStop(string lp_1, int lp_2);
0x20A - string MakeMsgTextureVideoSetFrame(string lp_1, int lp_2, int lp_3);
0x20B - string MakeMsgTextureVideoSetPaused(string lp_1, int lp_2, bool lp_3);
0x20C - string MakeMsgTextureVideoSetTime(string lp_1, int lp_2, fixed lp_3);
0x20D - string MakeMsgTransition(int lp_1, fixed lp_2, fixed lp_3);
0x20E - string TextureGetSlotName(string lp_1);
0x20F - int TextureGetSlotComponent(string lp_1);
0x210 - doodad DoodadFromId(int lp_1);
0x211 - void ModelAnimationLoad(string lp_1, string lp_2);
0x212 - void ModelAnimationLoadOverriding(string lp_1, string lp_2);
0x213 - void ModelAnimationUnload(string lp_1, string lp_2);
0x214 - void AnimLengthQueryByName(actor lp_1, string lp_2, bool lp_3);
0x215 - void AnimLengthQueryByProps(actor lp_1, string lp_2);
0x216 - generichandle AnimLengthQueryLastCreated();
0x217 - void AnimLengthQueryWait();
0x218 - fixed AnimLengthSync(generichandle lp_1);
0x219 - fixed AnimLengthRemainingSync(generichandle lp_1);
0x21A - void AnimWait(actor lp_1, string lp_2, fixed lp_3, int lp_4);
0x21B - string AutomationBuildNumberGet();
0x21C - text AutomationComputerNameGet();
0x21D - string AutomationLuaGlobalGetAsString(string lp_1);
0x21E - string AutomationMapNameGet();
0x21F - bool BankConditionEvaluate(int lp_1, string lp_2);
0x220 - void BankDeleteCampaignBanks(int lp_1, int lp_2);
0x221 - bool BankExists(string lp_1, int lp_2);
0x222 - text BankSizeAsText(string lp_1, int lp_2);
0x223 - bank BankLastCreated();
0x224 - bank BankLoad(string lp_1, int lp_2);
0x225 - string BankName(bank lp_1);
0x226 - int BankPlayer(bank lp_1);
0x227 - void BankReload(bank lp_1);
0x228 - void BankRemove(bank lp_1);
0x229 - void BankSave(bank lp_1);
0x22A - bool BankVerify(bank lp_1);
0x22B - void BankWait(bank lp_1);
0x22C - void BankBackup(bank lp_1, int lp_2);
0x22D - void BankRestore(bank lp_1, int lp_2, int lp_3);
0x22E - int BankBackupGetId(bank lp_1);
0x22F - int BankBackupGetLatestId(bank lp_1);
0x230 - void BankBackupRemove(bank lp_1, int lp_2, int lp_3);
0x231 - bool BankOptionGet(bank lp_1, int lp_2);
0x232 - void BankOptionSet(bank lp_1, int lp_2, bool lp_3);
0x233 - int BankSectionCount(bank lp_1);
0x234 - void BankSectionCreate(bank lp_1, string lp_2);
0x235 - bool BankSectionExists(bank lp_1, string lp_2);
0x236 - text BankSectionSizeAsText(bank lp_1, string lp_2);
0x237 - string BankSectionName(bank lp_1, int lp_2);
0x238 - void BankSectionRemove(bank lp_1, string lp_2);
0x239 - int BankKeyCount(bank lp_1, string lp_2);
0x23A - bool BankKeyExists(bank lp_1, string lp_2, string lp_3);
0x23B - text BankKeySizeAsText(bank lp_1, string lp_2, string lp_3);
0x23C - string BankKeyName(bank lp_1, string lp_2, int lp_3);
0x23D - void BankKeyRemove(bank lp_1, string lp_2, string lp_3);
0x23E - bool BankValueIsType(bank lp_1, string lp_2, string lp_3, int lp_4);
0x23F - fixed BankValueGetAsFixed(bank lp_1, string lp_2, string lp_3);
0x240 - void BankValueSetFromFixed(bank lp_1, string lp_2, string lp_3, fixed lp_4);
0x241 - bool BankValueGetAsFlag(bank lp_1, string lp_2, string lp_3);
0x242 - void BankValueSetFromFlag(bank lp_1, string lp_2, string lp_3, bool lp_4);
0x243 - int BankValueGetAsInt(bank lp_1, string lp_2, string lp_3);
0x244 - void BankValueSetFromInt(bank lp_1, string lp_2, string lp_3, int lp_4);
0x245 - point BankValueGetAsPoint(bank lp_1, string lp_2, string lp_3);
0x246 - void BankValueSetFromPoint(bank lp_1, string lp_2, string lp_3, point lp_4);
0x247 - string BankValueGetAsString(bank lp_1, string lp_2, string lp_3);
0x248 - void BankValueSetFromString(bank lp_1, string lp_2, string lp_3, string lp_4);
0x249 - text BankValueGetAsText(bank lp_1, string lp_2, string lp_3);
0x24A - void BankValueSetFromText(bank lp_1, string lp_2, string lp_3, text lp_4);
0x24B - unit BankLastRestoredUnit();
0x24C - unit BankValueGetAsUnit(bank lp_1, string lp_2, string lp_3, int lp_4, point lp_5, fixed lp_6);
0x24D - void BankValueSetFromUnit(bank lp_1, string lp_2, string lp_3, unit lp_4);
0x24E - int BattleReportGetDialogControl();
0x24F - void BattleReportPanelSetSelectedBattleReport(playergroup lp_1, int lp_2);
0x250 - int BattleReportPanelGetSelectedBattleReport(int lp_1);
0x251 - int BattleReportCreate(playergroup lp_1, text lp_2, int lp_3, int lp_4);
0x252 - int BattleReportLastCreated();
0x253 - void BattleReportDestroy(int lp_1);
0x254 - void BattleReportSetState(int lp_1, int lp_2);
0x255 - void BattleReportSetPriority(int lp_1, int lp_2);
0x256 - void BattleReportSetButtonText(int lp_1, text lp_2);
0x257 - void BattleReportSetButtonImage(int lp_1, string lp_2);
0x258 - void BattleReportSetMissionText(int lp_1, text lp_2);
0x259 - void BattleReportSetResearchTitle(int lp_1, text lp_2);
0x25A - void BattleReportSetResearchText(int lp_1, text lp_2);
0x25B - void BattleReportSetBonusTitle(int lp_1, text lp_2);
0x25C - void BattleReportSetBonusText(int lp_1, text lp_2);
0x25D - void BattleReportSetBestTimeText(int lp_1, text lp_2);
0x25E - void BattleReportSetMissionImage(int lp_1, string lp_2);
0x25F - void BattleReportSetDifficultyLevelCompleted(int lp_1, int lp_2, bool lp_3);
0x260 - void BattleReportSetDifficultyLevelBestTimeText(int lp_1, int lp_2, text lp_3);
0x261 - void BattleReportAddAchievement(int lp_1, string lp_2);
0x262 - void BattleReportSetSceneText(int lp_1, text lp_2);
0x263 - void BattleReportSetSceneImage(int lp_1, string lp_2);
0x264 - void BattleReportSetShownInMissionTotal(int lp_1, bool lp_2);
0x265 - int BattleReportGetState(int lp_1);
0x266 - int BattleReportGetPriority(int lp_1);
0x267 - text BattleReportGetButtonText(int lp_1);
0x268 - string BattleReportGetButtonImage(int lp_1);
0x269 - text BattleReportGetMissionText(int lp_1);
0x26A - text BattleReportGetResearchTitle(int lp_1);
0x26B - text BattleReportGetResearchText(int lp_1);
0x26C - text BattleReportGetBonusTitle(int lp_1);
0x26D - text BattleReportGetBonusText(int lp_1);
0x26E - text BattleReportGetBestTimeText(int lp_1);
0x26F - string BattleReportGetMissionImage(int lp_1);
0x270 - bool BattleReportGetDifficultyLevelCompleted(int lp_1, int lp_2);
0x271 - text BattleReportGetDifficultyLevelBestTimeText(int lp_1, int lp_2);
0x272 - text BattleReportGetSceneText(int lp_1);
0x273 - string BattleReportGetSceneImage(int lp_1);
0x274 - bool BattleReportGetShownInMissionTotal(int lp_1);
0x275 - void TriggerAddEventBattleReportPanelExit(trigger lp_1, int lp_2);
0x276 - void TriggerAddEventBattleReportPanelPlayMission(trigger lp_1, int lp_2);
0x277 - void TriggerAddEventBattleReportPanelPlayScene(trigger lp_1, int lp_2);
0x278 - void TriggerAddEventBattleReportPanelSelectionChanged(trigger lp_1, int lp_2);
0x279 - int EventBattleReportPanelMissionSelected();
0x27A - int EventBattleReportPanelDifficultySelected();
0x27B - int EventBattleReportPanelSceneSelected();
0x27C - void BitMaskSetIndex(bitmask lp_1, int lp_2, bool lp_3);
0x27D - bitmask BitMaskMakeDefaultMask();
0x27E - bool BitMaskIsEqual(bitmask lp_1, bitmask lp_2);
0x27F - bool BitMaskTrueIndex(bitmask lp_1, int lp_2);
0x280 - bool BitMaskFalseIndex(bitmask lp_1, int lp_2);
0x281 - void BitMaskReset(bitmask lp_1);
0x282 - int BitMaskCountOnBits(bitmask lp_1);
0x283 - void BitMaskAddBitMask(bitmask lp_1, bitmask lp_2);
0x284 - void BitMaskAndBitMask(bitmask lp_1, bitmask lp_2);
0x285 - void BitMaskOrBitMask(bitmask lp_1, bitmask lp_2);
0x286 - void BitMaskXorBitMask(bitmask lp_1, bitmask lp_2);
0x287 - void BitMaskInvert(bitmask lp_1);
0x288 - void BitMaskLeftShift(bitmask lp_1, int lp_2);
0x289 - void BitMaskRightShift(bitmask lp_1, int lp_2);
0x28A - int BoardCreate(int lp_1, int lp_2, text lp_3, color lp_4);
0x28B - int BoardLastCreated();
0x28C - void BoardDestroy(int lp_1);
0x28D - void BoardShowAll(bool lp_1, playergroup lp_2);
0x28E - void BoardSetAnchor(int lp_1, int lp_2, int lp_3, int lp_4);
0x28F - void BoardSetPosition(int lp_1, int lp_2, int lp_3);
0x290 - void BoardResetPosition(int lp_1);
0x291 - void BoardTitleShow(int lp_1, playergroup lp_2, bool lp_3);
0x292 - void BoardTitleSetText(int lp_1, text lp_2);
0x293 - void BoardTitleSetColor(int lp_1, int lp_2, color lp_3);
0x294 - void BoardTitleSetIcon(int lp_1, string lp_2);
0x295 - void BoardTitleSetAlignment(int lp_1, int lp_2, int lp_3);
0x296 - void BoardTitleSetClickable(int lp_1, bool lp_2);
0x297 - void BoardSetName(int lp_1, text lp_2, color lp_3);
0x298 - void BoardSetState(int lp_1, playergroup lp_2, int lp_3, bool lp_4);
0x299 - void BoardMinimizeShow(int lp_1, playergroup lp_2, bool lp_3);
0x29A - void BoardMinimizeEnable(int lp_1, playergroup lp_2, bool lp_3);
0x29B - void BoardMinimizeSetState(int lp_1, playergroup lp_2, bool lp_3);
0x29C - void BoardMinimizeSetColor(int lp_1, color lp_2);
0x29D - void BoardSetColumnCount(int lp_1, int lp_2);
0x29E - void BoardSetRowCount(int lp_1, int lp_2);
0x29F - void BoardSetColumnWidth(int lp_1, int lp_2, fixed lp_3);
0x2A0 - void BoardSetGroupCount(int lp_1, int lp_2);
0x2A1 - void BoardRowSetGroup(int lp_1, int lp_2, int lp_3);
0x2A2 - void BoardItemSetText(int lp_1, int lp_2, int lp_3, text lp_4);
0x2A3 - void BoardItemSetTextColor(int lp_1, int lp_2, int lp_3, color lp_4);
0x2A4 - void BoardItemSetBackgroundColor(int lp_1, int lp_2, int lp_3, color lp_4);
0x2A5 - void BoardItemSetIcon(int lp_1, int lp_2, int lp_3, string lp_4, bool lp_5);
0x2A6 - void BoardItemSetAlignment(int lp_1, int lp_2, int lp_3, int lp_4);
0x2A7 - void BoardItemSetFontSize(int lp_1, int lp_2, int lp_3, int lp_4);
0x2A8 - void BoardItemSetSortValue(int lp_1, int lp_2, int lp_3, int lp_4);
0x2A9 - void BoardItemSetProgressShow(int lp_1, int lp_2, int lp_3, bool lp_4);
0x2AA - void BoardItemSetProgressRange(int lp_1, int lp_2, int lp_3, fixed lp_4, fixed lp_5);
0x2AB - void BoardItemSetProgressValue(int lp_1, int lp_2, int lp_3, fixed lp_4);
0x2AC - void BoardItemSetProgressColor(int lp_1, int lp_2, int lp_3, color lp_4, int lp_5);
0x2AD - void BoardSort(int lp_1, int lp_2, bool lp_3, int lp_4);
0x2AE - void BoardSetPlayerColumn(int lp_1, int lp_2, bool lp_3);
0x2AF - void BoardPlayerAdd(int lp_1, int lp_2);
0x2B0 - void BoardPlayerRemove(int lp_1, int lp_2);
0x2B1 - camerainfo CameraInfoDefault();
0x2B2 - camerainfo CameraInfoFromId(int lp_1);
0x2B3 - void CameraInfoSetValue(camerainfo lp_1, int lp_2, fixed lp_3);
0x2B4 - fixed CameraInfoGetValue(camerainfo lp_1, int lp_2);
0x2B5 - void CameraInfoSetTarget(camerainfo lp_1, point lp_2);
0x2B6 - point CameraInfoGetTarget(camerainfo lp_1);
0x2B7 - void CameraApplyInfo(int lp_1, camerainfo lp_2, fixed lp_3, fixed lp_4, fixed lp_5, bool lp_6);
0x2B8 - void CameraPan(int lp_1, point lp_2, fixed lp_3, fixed lp_4, fixed lp_5, bool lp_6);
0x2B9 - void CameraSetValue(int lp_1, int lp_2, fixed lp_3, fixed lp_4, fixed lp_5, fixed lp_6);
0x2BA - void CameraUseModel(int lp_1, unit lp_2, string lp_3, fixed lp_4);
0x2BB - void CameraForceMouseRelative(int lp_1, bool lp_2);
0x2BC - void CameraLockInput(int lp_1, bool lp_2);
0x2BD - void CameraSetMouseRotates(int lp_1, bool lp_2);
0x2BE - void CameraSetMouseRotationSpeed(int lp_1, int lp_2, fixed lp_3);
0x2BF - void CameraSetVerticalFieldOfView(int lp_1, bool lp_2);
0x2C0 - void CameraUseHeightDisplacement(int lp_1, bool lp_2);
0x2C1 - void CameraUseHeightSmoothing(int lp_1, bool lp_2);
0x2C2 - void CameraSetChannel(int lp_1, unit lp_2, string lp_3, int lp_4, fixed lp_5);
0x2C3 - void CameraClearChannel(int lp_1, int lp_2);
0x2C4 - void CameraSetChannelOnPortrait(int lp_1, camerainfo lp_2, fixed lp_3, int lp_4, int lp_5);
0x2C5 - void CameraClearChannelOnPortrait(int lp_1, int lp_2, int lp_3);
0x2C6 - void CameraShake(int lp_1, string lp_2, string lp_3, fixed lp_4, fixed lp_5, fixed lp_6);
0x2C7 - void CameraShakeStart(int lp_1, int lp_2, int lp_3, fixed lp_4, fixed lp_5, fixed lp_6, fixed lp_7);
0x2C8 - void CameraShakeStop(int lp_1);
0x2C9 - void CameraSave(int lp_1);
0x2CA - void CameraRestore(int lp_1, fixed lp_2, fixed lp_3, fixed lp_4);
0x2CB - point CameraGetTarget(int lp_1);
0x2CC - fixed CameraGetPitch(int lp_1);
0x2CD - fixed CameraGetYaw(int lp_1);
0x2CE - fixed CameraGetDistance(int lp_1);
0x2CF - void CameraSetData(playergroup lp_1, string lp_2);
0x2D0 - void CameraSetBounds(playergroup lp_1, region lp_2, bool lp_3);
0x2D1 - void CameraFollowUnitGroup(int lp_1, unitgroup lp_2, bool lp_3, bool lp_4);
0x2D2 - unitgroup CameraFollowUnitGroupGet(int lp_1);
0x2D3 - void CameraForceFollowUnitGroup(int lp_1, bool lp_2);
0x2D4 - void CameraLookAt(int lp_1, point lp_2, fixed lp_3, fixed lp_4, fixed lp_5);
0x2D5 - void CameraLookAtActor(int lp_1, actor lp_2);
0x2D6 - void CameraLookAtUnit(int lp_1, unit lp_2);
0x2D7 - void TriggerAddEventCameraMove(trigger lp_1, int lp_2, int lp_3);
0x2D8 - int EventCameraMoveReason();
0x2D9 - void CampaignInitAI();
0x2DA - void CampaignProgressSetText(playergroup lp_1, string lp_2, text lp_3);
0x2DB - void CampaignProgressSetImageFilePath(playergroup lp_1, string lp_2, string lp_3);
0x2DC - void CampaignProgressSetTutorialFinished(playergroup lp_1, string lp_2, bool lp_3);
0x2DD - void CampaignProgressSetCampaignFinished(playergroup lp_1, string lp_2, bool lp_3);
0x2DE - void CampaignProgressDeleteCampaignSave(playergroup lp_1);
0x2DF - void CampaignProgressEnableCampaignSaves(playergroup lp_1, bool lp_2);
0x2E0 - void CampaignProgressEnableCampaignCompletedSaves(playergroup lp_1, bool lp_2);
0x2E1 - int AbilityClass(string lp_1);
0x2E2 - int CatalogEntryCount(int lp_1);
0x2E3 - string CatalogEntryGet(int lp_1, int lp_2);
0x2E4 - bool CatalogEntryIsDefault(int lp_1, string lp_2);
0x2E5 - bool CatalogEntryIsValid(int lp_1, string lp_2);
0x2E6 - int CatalogEntryClass(int lp_1, string lp_2);
0x2E7 - string CatalogEntryParent(int lp_1, string lp_2);
0x2E8 - string CatalogEntryScope(int lp_1, string lp_2);
0x2E9 - int CatalogFieldCount(string lp_1);
0x2EA - string CatalogFieldGet(string lp_1, int lp_2);
0x2EB - bool CatalogFieldExists(string lp_1, string lp_2);
0x2EC - bool CatalogFieldIsArray(string lp_1, string lp_2);
0x2ED - bool CatalogFieldIsScope(string lp_1, string lp_2);
0x2EE - string CatalogFieldType(string lp_1, string lp_2);
0x2EF - int CatalogFieldTypeCategory(string lp_1, string lp_2);
0x2F0 - int CatalogFieldValueCount(int lp_1, string lp_2, string lp_3, int lp_4);
0x2F1 - string CatalogFieldValueGet(int lp_1, string lp_2, string lp_3, int lp_4);
0x2F2 - int CatalogFieldValueGetAsInt(int lp_1, string lp_2, string lp_3, int lp_4);
0x2F3 - int CatalogFieldValueGetFlagsAsInt(int lp_1, string lp_2, string lp_3, int lp_4);
0x2F4 - bool CatalogFieldValueModify(int lp_1, string lp_2, string lp_3, int lp_4, string lp_5, int lp_6);
0x2F5 - bool CatalogFieldValueSet(int lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0x2F6 - int CatalogReferenceCount(string lp_1, int lp_2);
0x2F7 - string CatalogReferenceGet(string lp_1, int lp_2);
0x2F8 - int CatalogReferenceGetAsInt(string lp_1, int lp_2);
0x2F9 - bool CatalogReferenceModify(string lp_1, int lp_2, string lp_3, int lp_4);
0x2FA - bool CatalogReferenceSet(string lp_1, int lp_2, string lp_3);
0x2FB - void CatalogLinkReplace(int lp_1, int lp_2, string lp_3, string lp_4);
0x2FC - string CatalogLinkReplacement(int lp_1, int lp_2, string lp_3);
0x2FD - void CharacterSheetPanelSetNameText(playergroup lp_1, text lp_2);
0x2FE - void CharacterSheetPanelSetDescriptionText(playergroup lp_1, text lp_2);
0x2FF - void CharacterSheetPanelSetPortraitModelLink(playergroup lp_1, string lp_2);
0x300 - void CinematicMode(playergroup lp_1, bool lp_2, fixed lp_3);
0x301 - void CinematicFade(bool lp_1, fixed lp_2, int lp_3, color lp_4, fixed lp_5, bool lp_6);
0x302 - void CinematicOverlay(bool lp_1, fixed lp_2, string lp_3, fixed lp_4, bool lp_5);
0x303 - void CinematicDataRun(int lp_1, playergroup lp_2, bool lp_3);
0x304 - void CinematicDataStop();
0x305 - int BoolToInt(bool lp_1);
0x306 - int Color255FromFixed(fixed lp_1);
0x307 - fixed IntToFixed(int lp_1);
0x308 - string IntToString(int lp_1);
0x309 - text IntToText(int lp_1);
0x30A - int FixedToInt(fixed lp_1);
0x30B - string FixedToString(fixed lp_1, int lp_2);
0x30C - text FixedToText(fixed lp_1, int lp_2);
0x30D - text FixedToTextAdvanced(fixed lp_1, int lp_2, bool lp_3, int lp_4, int lp_5);
0x30E - int StringToInt(string lp_1);
0x30F - fixed StringToFixed(string lp_1);
0x310 - abilcmd StringToAbilCmd(string lp_1);
0x311 - color Color(fixed lp_1, fixed lp_2, fixed lp_3);
0x312 - color ColorWithAlpha(fixed lp_1, fixed lp_2, fixed lp_3, fixed lp_4);
0x313 - color ColorFromIndex(int lp_1, int lp_2);
0x314 - fixed ColorGetComponent(color lp_1, int lp_2);
0x315 - text FormatNumber(int lp_1);
0x316 - text FormatDuration(int lp_1);
0x317 - int ConversationCreate(bool lp_1);
0x318 - int ConversationLastCreated();
0x319 - void ConversationDestroy(int lp_1);
0x31A - void ConversationDestroyAll();
0x31B - void ConversationShow(int lp_1, playergroup lp_2, bool lp_3);
0x31C - bool ConversationVisible(int lp_1, int lp_2);
0x31D - int ConversationReplyCreate(int lp_1, text lp_2);
0x31E - int ConversationReplyLastCreated();
0x31F - void ConversationReplyDestroy(int lp_1, int lp_2);
0x320 - void ConversationReplyDestroyAll(int lp_1);
0x321 - void ConversationReplySetText(int lp_1, int lp_2, text lp_3);
0x322 - text ConversationReplyGetText(int lp_1, int lp_2);
0x323 - void ConversationReplySetState(int lp_1, int lp_2, int lp_3);
0x324 - int ConversationReplyGetState(int lp_1, int lp_2);
0x325 - void TriggerAddEventConversationReplySelected(trigger lp_1, int lp_2, int lp_3, int lp_4);
0x326 - int EventConversation();
0x327 - int EventConversationReply();
0x328 - int ConversationReplyGetIndex(int lp_1, int lp_2);
0x329 - int ConversationDataStateIndexCount(string lp_1);
0x32A - string ConversationDataStateIndex(string lp_1, int lp_2);
0x32B - text ConversationDataStateName(string lp_1);
0x32C - text ConversationDataStateText(string lp_1, string lp_2);
0x32D - fixed ConversationDataStateFixedValue(string lp_1, string lp_2);
0x32E - string ConversationDataStateImagePath(string lp_1);
0x32F - int ConversationDataStateImageEdge(string lp_1);
0x330 - string ConversationDataStateAttachPoint(string lp_1);
0x331 - string ConversationDataStateMoviePath(string lp_1);
0x332 - string ConversationDataStateModel(string lp_1, string lp_2);
0x333 - string ConversationDataStateUpgrade(string lp_1, string lp_2);
0x334 - abilcmd ConversationDataStateAbilCmd(string lp_1, string lp_2);
0x335 - void ConversationDataRegisterCamera(string lp_1, string lp_2, camerainfo lp_3, trigger lp_4, bool lp_5);
0x336 - void ConversationDataRegisterUnit(string lp_1, unit lp_2);
0x337 - void ConversationDataRegisterPortrait(string lp_1, int lp_2);
0x338 - void ConversationDataStateSetValue(string lp_1, int lp_2);
0x339 - int ConversationDataStateGetValue(string lp_1);
0x33A - int ConversationDataChoiceCount(string lp_1);
0x33B - string ConversationDataChoiceId(string lp_1, int lp_2);
0x33C - void ConversationDataChoiceSetState(string lp_1, string lp_2, int lp_3);
0x33D - int ConversationDataChoiceGetState(string lp_1, string lp_2);
0x33E - void ConversationDataChoiceSetPicked(string lp_1, string lp_2, bool lp_3);
0x33F - bool ConversationDataChoiceGetPicked(string lp_1, string lp_2);
0x340 - void ConversationDataChoiceSetPickedCount(string lp_1, string lp_2, int lp_3);
0x341 - int ConversationDataChoiceGetPickedCount(string lp_1, string lp_2);
0x342 - int ConversationDataLineCount(string lp_1);
0x343 - string ConversationDataLineId(string lp_1, int lp_2);
0x344 - void ConversationDataLineSetPickedCount(string lp_1, string lp_2, int lp_3);
0x345 - int ConversationDataLineGetPickedCount(string lp_1, string lp_2);
0x346 - void ConversationDataLineSetPlayers(string lp_1, string lp_2, playergroup lp_3);
0x347 - void ConversationDataLineResetPlayers(string lp_1, string lp_2);
0x348 - void ConversationDataLineHideForObservers(string lp_1, string lp_2, bool lp_3);
0x349 - void ConversationDataSetListenerGender(string lp_1, int lp_2);
0x34A - void ConversationDataSaveStateValues(string lp_1, bank lp_2, string lp_3);
0x34B - void ConversationDataLoadStateValues(string lp_1, bank lp_2, string lp_3);
0x34C - void ConversationDataSaveStateValue(string lp_1, bank lp_2, string lp_3);
0x34D - void ConversationDataLoadStateValue(string lp_1, bank lp_2, string lp_3);
0x34E - void ConversationDataResetStateValues(string lp_1);
0x34F - void ConversationDataSaveNodeState(string lp_1, bank lp_2, string lp_3);
0x350 - void ConversationDataLoadNodeState(string lp_1, bank lp_2, string lp_3);
0x351 - void ConversationDataResetNodeState(string lp_1);
0x352 - void ConversationDataPreloadLines(string lp_1);
0x353 - void ConversationDataPreloadLinesQueue(string lp_1);
0x354 - void ConversationDataSimulateRun(string lp_1);
0x355 - string ConversationDataGetSound(string lp_1, bool lp_2);
0x356 - string ConversationDataGetSpeaker(string lp_1);
0x357 - bool ConversationDataCanRun(string lp_1, bool lp_2);
0x358 - void ConversationDataRun(string lp_1, playergroup lp_2, int lp_3, bool lp_4);
0x359 - void ConversationDataStop();
0x35A - string ConversationDataActiveLine();
0x35B - string ConversationDataActiveSound();
0x35C - string ConversationDataActiveCamera();
0x35D - bool ConversationDataWasSkipped();
0x35E - void TriggerAddEventConversationStateChanged(trigger lp_1, string lp_2);
0x35F - string EventConversationState();
0x360 - int CutsceneCreateNoPosition(string lp_1, playergroup lp_2, bool lp_3);
0x361 - int CutsceneCreateNew(string lp_1, point lp_2, fixed lp_3, playergroup lp_4, bool lp_5);
0x362 - int CutsceneCreate(string lp_1, point lp_2, playergroup lp_3, bool lp_4);
0x363 - int CutsceneLastCreated();
0x364 - void CutscenePlay(int lp_1);
0x365 - void CutscenePause(int lp_1);
0x366 - void CutsceneStop(int lp_1);
0x367 - void CutsceneSetTime(int lp_1, int lp_2);
0x368 - void CutsceneGoToBookmark(int lp_1, string lp_2);
0x369 - void CutsceneGoToNextBookmark(int lp_1);
0x36A - void CutscenePlayCutsceneRangeOverTime(int lp_1, string lp_2, string lp_3, fixed lp_4);
0x36B - void CutsceneSetGlobalFilter(string lp_1);
0x36C - void CutsceneSetFilter(int lp_1, string lp_2);
0x36D - void CutsceneAddGlobalFilter(string lp_1);
0x36E - void CutsceneAddFilter(int lp_1, string lp_2);
0x36F - void CutsceneRemoveGlobalFilter(string lp_1);
0x370 - void CutsceneRemoveFilter(int lp_1, string lp_2);
0x371 - void CutsceneClearGlobalFilters();
0x372 - void CutsceneClearFilters(int lp_1);
0x373 - void CutsceneFade(bool lp_1, fixed lp_2, color lp_3, fixed lp_4, playergroup lp_5, bool lp_6);
0x374 - void CutsceneShow(int lp_1, bool lp_2);
0x375 - int CutsceneGetTriggerControl(int lp_1);
0x376 - void WaitForCutsceneToEnd(int lp_1);
0x377 - void TriggerAddEventCutsceneBookmarkFired(trigger lp_1, int lp_2, string lp_3);
0x378 - void TriggerAddEventCutsceneEndSceneFired(trigger lp_1, int lp_2);
0x379 - void TriggerAddEventCutsceneConversationLine(trigger lp_1, int lp_2, string lp_3);
0x37A - int EventCutsceneId();
0x37B - string EventCutsceneBookmark();
0x37C - void DataTableClear(bool lp_1);
0x37D - int DataTableValueCount(bool lp_1);
0x37E - string DataTableValueName(bool lp_1, int lp_2);
0x37F - bool DataTableValueExists(bool lp_1, string lp_2);
0x380 - int DataTableValueType(bool lp_1, string lp_2);
0x381 - void DataTableValueRemove(bool lp_1, string lp_2);
0x382 - void DataTableSetAbilCmd(bool lp_1, string lp_2, abilcmd lp_3);
0x383 - abilcmd DataTableGetAbilCmd(bool lp_1, string lp_2);
0x384 - void DataTableSetActor(bool lp_1, string lp_2, actor lp_3);
0x385 - actor DataTableGetActor(bool lp_1, string lp_2);
0x386 - void DataTableSetActorScope(bool lp_1, string lp_2, actorscope lp_3);
0x387 - actorscope DataTableGetActorScope(bool lp_1, string lp_2);
0x388 - void DataTableSetAIFilter(bool lp_1, string lp_2, aifilter lp_3);
0x389 - aifilter DataTableGetAIFilter(bool lp_1, string lp_2);
0x38A - void DataTableSetBank(bool lp_1, string lp_2, bank lp_3);
0x38B - bank DataTableGetBank(bool lp_1, string lp_2);
0x38C - void DataTableSetBool(bool lp_1, string lp_2, bool lp_3);
0x38D - bool DataTableGetBool(bool lp_1, string lp_2);
0x38E - void DataTableSetByte(bool lp_1, string lp_2, byte lp_3);
0x38F - byte DataTableGetByte(bool lp_1, string lp_2);
0x390 - void DataTableSetCameraInfo(bool lp_1, string lp_2, camerainfo lp_3);
0x391 - camerainfo DataTableGetCameraInfo(bool lp_1, string lp_2);
0x392 - void DataTableSetCinematic(bool lp_1, string lp_2, int lp_3);
0x393 - int DataTableGetCinematic(bool lp_1, string lp_2);
0x394 - void DataTableSetColor(bool lp_1, string lp_2, color lp_3);
0x395 - color DataTableGetColor(bool lp_1, string lp_2);
0x396 - void DataTableSetControl(bool lp_1, string lp_2, int lp_3);
0x397 - int DataTableGetControl(bool lp_1, string lp_2);
0x398 - void DataTableSetConversation(bool lp_1, string lp_2, int lp_3);
0x399 - int DataTableGetConversation(bool lp_1, string lp_2);
0x39A - void DataTableSetDialog(bool lp_1, string lp_2, int lp_3);
0x39B - int DataTableGetDialog(bool lp_1, string lp_2);
0x39C - void DataTableSetDoodad(bool lp_1, string lp_2, doodad lp_3);
0x39D - doodad DataTableGetDoodad(bool lp_1, string lp_2);
0x39E - void DataTableSetFixed(bool lp_1, string lp_2, fixed lp_3);
0x39F - fixed DataTableGetFixed(bool lp_1, string lp_2);
0x3A0 - void DataTableSetGenericHandle(bool lp_1, string lp_2, generichandle lp_3);
0x3A1 - generichandle DataTableGetGenericHandle(bool lp_1, string lp_2);
0x3A2 - void DataTableSetInt(bool lp_1, string lp_2, int lp_3);
0x3A3 - int DataTableGetInt(bool lp_1, string lp_2);
0x3A4 - void DataTableSetMarker(bool lp_1, string lp_2, marker lp_3);
0x3A5 - marker DataTableGetMarker(bool lp_1, string lp_2);
0x3A6 - void DataTableSetObjective(bool lp_1, string lp_2, int lp_3);
0x3A7 - int DataTableGetObjective(bool lp_1, string lp_2);
0x3A8 - void DataTableSetOrder(bool lp_1, string lp_2, order lp_3);
0x3A9 - order DataTableGetOrder(bool lp_1, string lp_2);
0x3AA - void DataTableSetPing(bool lp_1, string lp_2, int lp_3);
0x3AB - int DataTableGetPing(bool lp_1, string lp_2);
0x3AC - void DataTableSetPlanet(bool lp_1, string lp_2, int lp_3);
0x3AD - int DataTableGetPlanet(bool lp_1, string lp_2);
0x3AE - void DataTableSetPlayerGroup(bool lp_1, string lp_2, playergroup lp_3);
0x3AF - playergroup DataTableGetPlayerGroup(bool lp_1, string lp_2);
0x3B0 - void DataTableSetPoint(bool lp_1, string lp_2, point lp_3);
0x3B1 - point DataTableGetPoint(bool lp_1, string lp_2);
0x3B2 - void DataTableSetPortrait(bool lp_1, string lp_2, int lp_3);
0x3B3 - int DataTableGetPortrait(bool lp_1, string lp_2);
0x3B4 - void DataTableSetRegion(bool lp_1, string lp_2, region lp_3);
0x3B5 - region DataTableGetRegion(bool lp_1, string lp_2);
0x3B6 - void DataTableSetReply(bool lp_1, string lp_2, int lp_3);
0x3B7 - int DataTableGetReply(bool lp_1, string lp_2);
0x3B8 - void DataTableSetRevealer(bool lp_1, string lp_2, revealer lp_3);
0x3B9 - revealer DataTableGetRevealer(bool lp_1, string lp_2);
0x3BA - void DataTableSetSound(bool lp_1, string lp_2, sound lp_3);
0x3BB - sound DataTableGetSound(bool lp_1, string lp_2);
0x3BC - void DataTableSetSoundLink(bool lp_1, string lp_2, soundlink lp_3);
0x3BD - soundlink DataTableGetSoundLink(bool lp_1, string lp_2);
0x3BE - void DataTableSetString(bool lp_1, string lp_2, string lp_3);
0x3BF - string DataTableGetString(bool lp_1, string lp_2);
0x3C0 - void DataTableSetText(bool lp_1, string lp_2, text lp_3);
0x3C1 - text DataTableGetText(bool lp_1, string lp_2);
0x3C2 - void DataTableSetTimer(bool lp_1, string lp_2, timer lp_3);
0x3C3 - timer DataTableGetTimer(bool lp_1, string lp_2);
0x3C4 - void DataTableSetTransmission(bool lp_1, string lp_2, int lp_3);
0x3C5 - int DataTableGetTransmission(bool lp_1, string lp_2);
0x3C6 - void DataTableSetTransmissionSource(bool lp_1, string lp_2, transmissionsource lp_3);
0x3C7 - transmissionsource DataTableGetTransmissionSource(bool lp_1, string lp_2);
0x3C8 - void DataTableSetTrigger(bool lp_1, string lp_2, trigger lp_3);
0x3C9 - trigger DataTableGetTrigger(bool lp_1, string lp_2);
0x3CA - void DataTableSetUnit(bool lp_1, string lp_2, unit lp_3);
0x3CB - unit DataTableGetUnit(bool lp_1, string lp_2);
0x3CC - void DataTableSetUnitFilter(bool lp_1, string lp_2, unitfilter lp_3);
0x3CD - unitfilter DataTableGetUnitFilter(bool lp_1, string lp_2);
0x3CE - void DataTableSetUnitGroup(bool lp_1, string lp_2, unitgroup lp_3);
0x3CF - unitgroup DataTableGetUnitGroup(bool lp_1, string lp_2);
0x3D0 - void DataTableSetUnitRef(bool lp_1, string lp_2, unitref lp_3);
0x3D1 - unitref DataTableGetUnitRef(bool lp_1, string lp_2);
0x3D2 - void DataTableSetWave(bool lp_1, string lp_2, wave lp_3);
0x3D3 - wave DataTableGetWave(bool lp_1, string lp_2);
0x3D4 - void DataTableSetWaveInfo(bool lp_1, string lp_2, waveinfo lp_3);
0x3D5 - waveinfo DataTableGetWaveInfo(bool lp_1, string lp_2);
0x3D6 - void DataTableSetWaveTarget(bool lp_1, string lp_2, wavetarget lp_3);
0x3D7 - wavetarget DataTableGetWaveTarget(bool lp_1, string lp_2);
0x3D8 - void DataTableInstanceCreate();
0x3D9 - int DataTableInstanceLastCreated();
0x3DA - void DataTableInstanceCopy(int lp_1, int lp_2, string lp_3);
0x3DB - void DataTableInstanceClear(int lp_1);
0x3DC - int DataTableInstanceValueCount(int lp_1);
0x3DD - string DataTableInstanceValueName(int lp_1, int lp_2);
0x3DE - bool DataTableInstanceValueExists(int lp_1, string lp_2);
0x3DF - int DataTableInstanceValueType(int lp_1, string lp_2);
0x3E0 - void DataTableInstanceValueRemove(int lp_1, string lp_2);
0x3E1 - void DataTableInstanceSetAbilCmd(int lp_1, string lp_2, abilcmd lp_3);
0x3E2 - abilcmd DataTableInstanceGetAbilCmd(int lp_1, string lp_2);
0x3E3 - void DataTableInstanceSetActor(int lp_1, string lp_2, actor lp_3);
0x3E4 - actor DataTableInstanceGetActor(int lp_1, string lp_2);
0x3E5 - void DataTableInstanceSetActorScope(int lp_1, string lp_2, actorscope lp_3);
0x3E6 - actorscope DataTableInstanceGetActorScope(int lp_1, string lp_2);
0x3E7 - void DataTableInstanceSetAIFilter(int lp_1, string lp_2, aifilter lp_3);
0x3E8 - aifilter DataTableInstanceGetAIFilter(int lp_1, string lp_2);
0x3E9 - void DataTableInstanceSetBank(int lp_1, string lp_2, bank lp_3);
0x3EA - bank DataTableInstanceGetBank(int lp_1, string lp_2);
0x3EB - void DataTableInstanceSetBool(int lp_1, string lp_2, bool lp_3);
0x3EC - bool DataTableInstanceGetBool(int lp_1, string lp_2);
0x3ED - void DataTableInstanceSetByte(int lp_1, string lp_2, byte lp_3);
0x3EE - byte DataTableInstanceGetByte(int lp_1, string lp_2);
0x3EF - void DataTableInstanceSetCameraInfo(int lp_1, string lp_2, camerainfo lp_3);
0x3F0 - camerainfo DataTableInstanceGetCameraInfo(int lp_1, string lp_2);
0x3F1 - void DataTableInstanceSetCinematic(int lp_1, string lp_2, int lp_3);
0x3F2 - int DataTableInstanceGetCinematic(int lp_1, string lp_2);
0x3F3 - void DataTableInstanceSetColor(int lp_1, string lp_2, color lp_3);
0x3F4 - color DataTableInstanceGetColor(int lp_1, string lp_2);
0x3F5 - void DataTableInstanceSetControl(int lp_1, string lp_2, int lp_3);
0x3F6 - int DataTableInstanceGetControl(int lp_1, string lp_2);
0x3F7 - void DataTableInstanceSetConversation(int lp_1, string lp_2, int lp_3);
0x3F8 - int DataTableInstanceGetConversation(int lp_1, string lp_2);
0x3F9 - void DataTableInstanceSetDialog(int lp_1, string lp_2, int lp_3);
0x3FA - int DataTableInstanceGetDialog(int lp_1, string lp_2);
0x3FB - void DataTableInstanceSetDoodad(int lp_1, string lp_2, doodad lp_3);
0x3FC - doodad DataTableInstanceGetDoodad(int lp_1, string lp_2);
0x3FD - void DataTableInstanceSetFixed(int lp_1, string lp_2, fixed lp_3);
0x3FE - fixed DataTableInstanceGetFixed(int lp_1, string lp_2);
0x3FF - void DataTableInstanceSetGenericHandle(int lp_1, string lp_2, generichandle lp_3);
0x400 - generichandle DataTableInstanceGetGenericHandle(int lp_1, string lp_2);
0x401 - void DataTableInstanceSetInt(int lp_1, string lp_2, int lp_3);
0x402 - int DataTableInstanceGetInt(int lp_1, string lp_2);
0x403 - void DataTableInstanceSetMarker(int lp_1, string lp_2, marker lp_3);
0x404 - marker DataTableInstanceGetMarker(int lp_1, string lp_2);
0x405 - void DataTableInstanceSetObjective(int lp_1, string lp_2, int lp_3);
0x406 - int DataTableInstanceGetObjective(int lp_1, string lp_2);
0x407 - void DataTableInstanceSetOrder(int lp_1, string lp_2, order lp_3);
0x408 - order DataTableInstanceGetOrder(int lp_1, string lp_2);
0x409 - void DataTableInstanceSetPing(int lp_1, string lp_2, int lp_3);
0x40A - int DataTableInstanceGetPing(int lp_1, string lp_2);
0x40B - void DataTableInstanceSetPlanet(int lp_1, string lp_2, int lp_3);
0x40C - int DataTableInstanceGetPlanet(int lp_1, string lp_2);
0x40D - void DataTableInstanceSetPlayerGroup(int lp_1, string lp_2, playergroup lp_3);
0x40E - playergroup DataTableInstanceGetPlayerGroup(int lp_1, string lp_2);
0x40F - void DataTableInstanceSetPoint(int lp_1, string lp_2, point lp_3);
0x410 - point DataTableInstanceGetPoint(int lp_1, string lp_2);
0x411 - void DataTableInstanceSetPortrait(int lp_1, string lp_2, int lp_3);
0x412 - int DataTableInstanceGetPortrait(int lp_1, string lp_2);
0x413 - void DataTableInstanceSetRegion(int lp_1, string lp_2, region lp_3);
0x414 - region DataTableInstanceGetRegion(int lp_1, string lp_2);
0x415 - void DataTableInstanceSetReply(int lp_1, string lp_2, int lp_3);
0x416 - int DataTableInstanceGetReply(int lp_1, string lp_2);
0x417 - void DataTableInstanceSetRevealer(int lp_1, string lp_2, revealer lp_3);
0x418 - revealer DataTableInstanceGetRevealer(int lp_1, string lp_2);
0x419 - void DataTableInstanceSetSound(int lp_1, string lp_2, sound lp_3);
0x41A - sound DataTableInstanceGetSound(int lp_1, string lp_2);
0x41B - void DataTableInstanceSetSoundLink(int lp_1, string lp_2, soundlink lp_3);
0x41C - soundlink DataTableInstanceGetSoundLink(int lp_1, string lp_2);
0x41D - void DataTableInstanceSetString(int lp_1, string lp_2, string lp_3);
0x41E - string DataTableInstanceGetString(int lp_1, string lp_2);
0x41F - void DataTableInstanceSetText(int lp_1, string lp_2, text lp_3);
0x420 - text DataTableInstanceGetText(int lp_1, string lp_2);
0x421 - void DataTableInstanceSetTimer(int lp_1, string lp_2, timer lp_3);
0x422 - timer DataTableInstanceGetTimer(int lp_1, string lp_2);
0x423 - void DataTableInstanceSetTransmission(int lp_1, string lp_2, int lp_3);
0x424 - int DataTableInstanceGetTransmission(int lp_1, string lp_2);
0x425 - void DataTableInstanceSetTransmissionSource(int lp_1, string lp_2, transmissionsource lp_3);
0x426 - transmissionsource DataTableInstanceGetTransmissionSource(int lp_1, string lp_2);
0x427 - void DataTableInstanceSetTrigger(int lp_1, string lp_2, trigger lp_3);
0x428 - trigger DataTableInstanceGetTrigger(int lp_1, string lp_2);
0x429 - void DataTableInstanceSetUnit(int lp_1, string lp_2, unit lp_3);
0x42A - unit DataTableInstanceGetUnit(int lp_1, string lp_2);
0x42B - void DataTableInstanceSetUnitFilter(int lp_1, string lp_2, unitfilter lp_3);
0x42C - unitfilter DataTableInstanceGetUnitFilter(int lp_1, string lp_2);
0x42D - void DataTableInstanceSetUnitGroup(int lp_1, string lp_2, unitgroup lp_3);
0x42E - unitgroup DataTableInstanceGetUnitGroup(int lp_1, string lp_2);
0x42F - void DataTableInstanceSetUnitRef(int lp_1, string lp_2, unitref lp_3);
0x430 - unitref DataTableInstanceGetUnitRef(int lp_1, string lp_2);
0x431 - void DataTableInstanceSetWave(int lp_1, string lp_2, wave lp_3);
0x432 - wave DataTableInstanceGetWave(int lp_1, string lp_2);
0x433 - void DataTableInstanceSetWaveInfo(int lp_1, string lp_2, waveinfo lp_3);
0x434 - waveinfo DataTableInstanceGetWaveInfo(int lp_1, string lp_2);
0x435 - void DataTableInstanceSetWaveTarget(int lp_1, string lp_2, wavetarget lp_3);
0x436 - wavetarget DataTableInstanceGetWaveTarget(int lp_1, string lp_2);
0x437 - int DialogCreate(int lp_1, int lp_2, int lp_3, int lp_4, int lp_5, bool lp_6);
0x438 - int DialogLastCreated();
0x439 - void DialogDestroy(int lp_1);
0x43A - void DialogDestroyAll();
0x43B - void DialogSetSubtitlePositionOverride(int lp_1);
0x43C - void DialogClearSubtitlePositionOverride();
0x43D - void DialogSetSubtitlePositionOverrideControl(int lp_1);
0x43E - void DialogClearSubtitlePositionOverrideControl();
0x43F - void DialogSetTitle(int lp_1, text lp_2);
0x440 - void DialogSetSize(int lp_1, int lp_2, int lp_3);
0x441 - void DialogSetPosition(int lp_1, int lp_2, int lp_3, int lp_4);
0x442 - void DialogSetPositionRelative(int lp_1, int lp_2, int lp_3, int lp_4, int lp_5, int lp_6);
0x443 - void DialogSetPositionRelativeToUnit(int lp_1, unit lp_2, string lp_3, int lp_4, int lp_5);
0x444 - void DialogSetPositionRelativeToUnitWithAnchor(int lp_1, unit lp_2, string lp_3, int lp_4, int lp_5, int lp_6);
0x445 - void DialogSetVisible(int lp_1, playergroup lp_2, bool lp_3);
0x446 - void DialogSetTransparency(int lp_1, fixed lp_2);
0x447 - void DialogSetImage(int lp_1, string lp_2);
0x448 - void DialogSetImageVisible(int lp_1, bool lp_2);
0x449 - void DialogSetOffscreen(int lp_1, bool lp_2);
0x44A - void DialogSetFullscreen(int lp_1, bool lp_2);
0x44B - void DialogSetEnabled(int lp_1, bool lp_2);
0x44C - void DialogSetChannel(int lp_1, int lp_2);
0x44D - void DialogSetRenderPriority(int lp_1, int lp_2);
0x44E - void DialogSetObservedType(int lp_1, int lp_2);
0x44F - bool DialogIsModal(int lp_1);
0x450 - text DialogGetTitle(int lp_1);
0x451 - int DialogGetWidth(int lp_1);
0x452 - int DialogGetHeight(int lp_1);
0x453 - int DialogGetAnchor(int lp_1);
0x454 - int DialogGetRelativeDialog(int lp_1);
0x455 - int DialogGetRelativeAnchor(int lp_1);
0x456 - int DialogGetOffsetX(int lp_1);
0x457 - int DialogGetOffsetY(int lp_1);
0x458 - bool DialogIsVisible(int lp_1, int lp_2);
0x459 - fixed DialogGetTransparency(int lp_1);
0x45A - string DialogGetImage(int lp_1);
0x45B - bool DialogIsImageVisible(int lp_1);
0x45C - bool DialogIsOffscreen(int lp_1);
0x45D - bool DialogIsFullscreen(int lp_1);
0x45E - bool DialogIsEnabled(int lp_1);
0x45F - int DialogGetChannel(int lp_1);
0x460 - int DialogGetRenderPriority(int lp_1);
0x461 - int DialogControlCreate(int lp_1, int lp_2);
0x462 - int DialogControlCreateInPanel(int lp_1, int lp_2);
0x463 - int DialogControlCreateFromTemplate(int lp_1, int lp_2, string lp_3);
0x464 - int DialogControlCreateInPanelFromTemplate(int lp_1, int lp_2, string lp_3);
0x465 - int DialogControlHookup(int lp_1, int lp_2, string lp_3);
0x466 - int DialogControlHookupStandard(int lp_1, string lp_2);
0x467 - int DialogControlHookupUnitStatus(int lp_1, string lp_2, unit lp_3);
0x468 - int DialogControlLastCreated();
0x469 - void DialogControlDestroy(int lp_1);
0x46A - void DialogControlDestroyAll(int lp_1);
0x46B - void DialogControlSetSize(int lp_1, playergroup lp_2, int lp_3, int lp_4);
0x46C - void DialogControlSetPosition(int lp_1, playergroup lp_2, int lp_3, int lp_4, int lp_5);
0x46D - void DialogControlSetPositionRelative(int lp_1, playergroup lp_2, int lp_3, int lp_4, int lp_5, int lp_6, int lp_7);
0x46E - void DialogControlSetVisible(int lp_1, playergroup lp_2, bool lp_3);
0x46F - void DialogControlSetEnabled(int lp_1, playergroup lp_2, bool lp_3);
0x470 - void DialogControlSetFullDialog(int lp_1, playergroup lp_2, bool lp_3);
0x471 - void DialogControlFadeTransparency(int lp_1, playergroup lp_2, fixed lp_3, fixed lp_4);
0x472 - int DialogControlGetDialog(int lp_1);
0x473 - int DialogControlGetType(int lp_1);
0x474 - int DialogControlGetWidth(int lp_1, int lp_2);
0x475 - int DialogControlGetHeight(int lp_1, int lp_2);
0x476 - int DialogControlGetAnchor(int lp_1, int lp_2);
0x477 - int DialogControlGetRelativeControl(int lp_1, int lp_2);
0x478 - int DialogControlGetRelativeAnchor(int lp_1, int lp_2);
0x479 - int DialogControlGetOffsetX(int lp_1, int lp_2);
0x47A - int DialogControlGetOffsetY(int lp_1, int lp_2);
0x47B - bool DialogControlIsVisible(int lp_1, int lp_2);
0x47C - bool DialogControlIsEnabled(int lp_1, int lp_2);
0x47D - bool DialogControlIsFullDialog(int lp_1, int lp_2);
0x47E - void DialogControlSetPropertyAsText(int lp_1, int lp_2, playergroup lp_3, text lp_4);
0x47F - void DialogControlSetPropertyAsString(int lp_1, int lp_2, playergroup lp_3, string lp_4);
0x480 - void DialogControlSetPropertyAsInt(int lp_1, int lp_2, playergroup lp_3, int lp_4);
0x481 - void DialogControlSetPropertyAsFixed(int lp_1, int lp_2, playergroup lp_3, fixed lp_4);
0x482 - void DialogControlSetPropertyAsBool(int lp_1, int lp_2, playergroup lp_3, bool lp_4);
0x483 - void DialogControlSetPropertyAsColor(int lp_1, int lp_2, playergroup lp_3, color lp_4);
0x484 - void DialogControlSetPropertyAsControl(int lp_1, int lp_2, playergroup lp_3, int lp_4);
0x485 - void DialogControlSetPropertyAsUnit(int lp_1, int lp_2, playergroup lp_3, unit lp_4);
0x486 - void DialogControlSetPropertyAsUnitGroup(int lp_1, int lp_2, playergroup lp_3, unitgroup lp_4);
0x487 - text DialogControlGetPropertyAsText(int lp_1, int lp_2, int lp_3);
0x488 - string DialogControlGetPropertyAsString(int lp_1, int lp_2, int lp_3);
0x489 - int DialogControlGetPropertyAsInt(int lp_1, int lp_2, int lp_3);
0x48A - fixed DialogControlGetPropertyAsFixed(int lp_1, int lp_2, int lp_3);
0x48B - bool DialogControlGetPropertyAsBool(int lp_1, int lp_2, int lp_3);
0x48C - color DialogControlGetPropertyAsColor(int lp_1, int lp_2, int lp_3);
0x48D - int DialogControlGetPropertyAsControl(int lp_1, int lp_2, int lp_3);
0x48E - unit DialogControlGetPropertyAsUnit(int lp_1, int lp_2, int lp_3);
0x48F - unitgroup DialogControlGetPropertyAsUnitGroup(int lp_1, int lp_2, int lp_3);
0x490 - void DialogControlAddItem(int lp_1, playergroup lp_2, text lp_3);
0x491 - void DialogControlRemoveItem(int lp_1, playergroup lp_2, int lp_3);
0x492 - void DialogControlRemoveAllItems(int lp_1, playergroup lp_2);
0x493 - void DialogControlSelectItem(int lp_1, playergroup lp_2, int lp_3);
0x494 - void DialogControlClearSelectedItem(int lp_1, playergroup lp_2);
0x495 - int DialogControlGetItemCount(int lp_1, int lp_2);
0x496 - int DialogControlGetSelectedItem(int lp_1, int lp_2);
0x497 - void DialogControlAddDataPoint(int lp_1, playergroup lp_2, fixed lp_3, fixed lp_4, int lp_5);
0x498 - void DialogControlRemoveAllDataPoints(int lp_1, playergroup lp_2);
0x499 - void DialogControlSetDataColor(int lp_1, playergroup lp_2, color lp_3, int lp_4);
0x49A - void DialogControlSetDataName(int lp_1, playergroup lp_2, text lp_3, int lp_4);
0x49B - void DialogControlSetMinXVisible(int lp_1, playergroup lp_2, fixed lp_3);
0x49C - fixed DialogControlGetMinXValue(int lp_1, playergroup lp_2);
0x49D - void DialogControlSetMaxXVisible(int lp_1, playergroup lp_2, fixed lp_3);
0x49E - fixed DialogControlGetMaxXValue(int lp_1, playergroup lp_2);
0x49F - void DialogControlSetMinYVisible(int lp_1, playergroup lp_2, fixed lp_3);
0x4A0 - fixed DialogControlGetMinYValue(int lp_1, playergroup lp_2);
0x4A1 - void DialogControlSetMaxYVisible(int lp_1, playergroup lp_2, fixed lp_3);
0x4A2 - fixed DialogControlGetMaxYValue(int lp_1, playergroup lp_2);
0x4A3 - void DialogControlInvokeAsText(int lp_1, playergroup lp_2, string lp_3, text lp_4, text lp_5, text lp_6, text lp_7);
0x4A4 - void DialogControlInvokeAsString(int lp_1, playergroup lp_2, string lp_3, string lp_4, string lp_5, string lp_6, string lp_7);
0x4A5 - void DialogControlSetAnimationState(int lp_1, playergroup lp_2, string lp_3, string lp_4);
0x4A6 - void DialogControlSendAnimationEvent(int lp_1, playergroup lp_2, string lp_3);
0x4A7 - void DialogControlSetAnimationSpeed(int lp_1, playergroup lp_2, string lp_3, fixed lp_4);
0x4A8 - void DialogControlSetAnimationTime(int lp_1, playergroup lp_2, string lp_3, fixed lp_4);
0x4A9 - void DialogControlAdvanceAnimation(int lp_1, playergroup lp_2, string lp_3, fixed lp_4);
0x4AA - void DialogControlForceTransition(int lp_1, playergroup lp_2, bool lp_3, bool lp_4);
0x4AB - void DialogControlRequestFocus(int lp_1, playergroup lp_2);
0x4AC - void DialogControlSetObservedType(int lp_1, int lp_2);
0x4AD - void TriggerAddEventDialogControl(trigger lp_1, int lp_2, int lp_3, int lp_4);
0x4AE - int EventDialogControl();
0x4AF - int EventDialogControlEventType();
0x4B0 - int EventDialogControlMouseButton();
0x4B1 - int EffectHistoryCount(effecthistory lp_1);
0x4B2 - string EffectHistoryGetAbil(effecthistory lp_1, int lp_2);
0x4B3 - fixed EffectHistoryGetAmountFixed(effecthistory lp_1, int lp_2, int lp_3, bool lp_4);
0x4B4 - int EffectHistoryGetAmountInt(effecthistory lp_1, int lp_2, int lp_3, bool lp_4);
0x4B5 - string EffectHistoryGetEffect(effecthistory lp_1, int lp_2, int lp_3);
0x4B6 - fixed EffectHistoryGetTime(effecthistory lp_1, int lp_2);
0x4B7 - int EffectHistoryGetType(effecthistory lp_1, int lp_2);
0x4B8 - unit EffectHistoryGetUnitByLocation(effecthistory lp_1, int lp_2, int lp_3);
0x4B9 - string EffectHistoryGetWeapon(effecthistory lp_1, int lp_2);
0x4BA - int SynchronousGameStartTimeGet();
0x4BB - int CurrentSynchronousGameTimeGet();
0x4BC - datetime CurrentDateTimeGet();
0x4BD - datetime InitialDateTimeGet();
0x4BE - int GetDateTimeYear(datetime lp_1);
0x4BF - int GetDateTimeMonth(datetime lp_1);
0x4C0 - int GetDateTimeDay(datetime lp_1);
0x4C1 - int GetDateTimeHour(datetime lp_1);
0x4C2 - int GetDateTimeMinute(datetime lp_1);
0x4C3 - int GetDateTimeSecond(datetime lp_1);
0x4C4 - int GetDateTimeWeekday(datetime lp_1);
0x4C5 - int DateTimeToInt(datetime lp_1);
0x4C6 - datetime IntToDateTime(int lp_1);
0x4C7 - string DateTimeToString(datetime lp_1);
0x4C8 - datetime StringToDateTime(string lp_1);
0x4C9 - bool DateTimeIsBefore(datetime lp_1, datetime lp_2);
0x4CA - bool DateTimeIsAfter(datetime lp_1, datetime lp_2);
0x4CB - int GameTimeOfDayCurrentTimeEvent();
0x4CC - string GameTimeOfDayGet();
0x4CD - int GameTimeOfDayValueGet(int lp_1);
0x4CE - void GameTimeOfDaySet(string lp_1);
0x4CF - void GameTimeOfDayValueSet(int lp_1);
0x4D0 - void GameTimeOfDayTimeValueSet(int lp_1, int lp_2, int lp_3);
0x4D1 - fixed GameTimeOfDayGetLength();
0x4D2 - void GameTimeOfDaySetLength(fixed lp_1);
0x4D3 - void GameTimeOfDayPause(bool lp_1);
0x4D4 - bool GameTimeOfDayIsPaused();
0x4D5 - void TriggerAddEventGameTimeEvent(trigger lp_1, int lp_2);
0x4D6 - int EventGameTimeEvent();
0x4D7 - int CreepAdjacent(point lp_1);
0x4D8 - bool CreepIsPresent(point lp_1);
0x4D9 - void CreepModify(point lp_1, fixed lp_2, bool lp_3, bool lp_4);
0x4DA - void CreepSetSpeed(int lp_1, fixed lp_2);
0x4DB - void PathingModify(region lp_1, int lp_2, bool lp_3);
0x4DC - void PathingUpdate();
0x4DD - void PathingReset();
0x4DE - int PathingType(point lp_1);
0x4DF - int PowerLevel(int lp_1, point lp_2, string lp_3);
0x4E0 - bool PowerIsProvidedBy(int lp_1, point lp_2, string lp_3, unit lp_4, int lp_5);
0x4E1 - bool CrossCliff(point lp_1, point lp_2);
0x4E2 - int CliffLevel(point lp_1);
0x4E3 - fixed WorldHeight(int lp_1, point lp_2);
0x4E4 - bool InShrub(point lp_1);
0x4E5 - bool HasCustomCellAttribute(point lp_1, int lp_2);
0x4E6 - void GameSetLighting(string lp_1, fixed lp_2);
0x4E7 - void GameSetToDLighting(string lp_1);
0x4E8 - void SelectMainShadowLight(string lp_1);
0x4E9 - void GameSetBackground(int lp_1, string lp_2, fixed lp_3);
0x4EA - void GameDestroyEffects(point lp_1, fixed lp_2, int lp_3, string lp_4);
0x4EB - void TerrainShowRegion(region lp_1, bool lp_2);
0x4EC - void WaterSetState(string lp_1, fixed lp_2, int lp_3);
0x4ED - void WaterPause(string lp_1, bool lp_2);
0x4EE - void FogSetEnabled(bool lp_1);
0x4EF - void FogSetDisableAtUltra(bool lp_1);
0x4F0 - void FogSetDensity(fixed lp_1);
0x4F1 - void FogSetColor(color lp_1);
0x4F2 - void FogSetFallOff(fixed lp_1);
0x4F3 - void FogSetStartHeight(fixed lp_1);
0x4F4 - void FogSetDensityOverTime(fixed lp_1, fixed lp_2);
0x4F5 - void FogSetColorOverTime(color lp_1, fixed lp_2);
0x4F6 - void FogSetFallOffOverTime(fixed lp_1, fixed lp_2);
0x4F7 - void FogSetStartHeightOverTime(fixed lp_1, fixed lp_2);
0x4F8 - void EnvironmentShow(int lp_1, bool lp_2);
0x4F9 - string TerrainTexture(point lp_1);
0x4FA - bool ConsoleCommand(string lp_1, bool lp_2, bool lp_3);
0x4FB - bool GameIsDebugOptionSet(string lp_1, int lp_2);
0x4FC - void GameSaveCreate(text lp_1, text lp_2, string lp_3, bool lp_4);
0x4FD - text GameMapName();
0x4FE - text GameMapDescription();
0x4FF - bool GameMapIsBlizzard();
0x500 - string GameMapPath();
0x501 - void GameSetMissionTimePaused(bool lp_1);
0x502 - bool GameIsMissionTimePaused();
0x503 - fixed GameGetMissionTime();
0x504 - fixed GameGetSpeed();
0x505 - void GameSetSpeedValue(int lp_1);
0x506 - int GameGetSpeedValue();
0x507 - void GameSetSpeedValueMinimum(int lp_1);
0x508 - int GameGetSpeedValueMinimum();
0x509 - void GameSetSpeedLocked(bool lp_1);
0x50A - bool GameIsSpeedLocked();
0x50B - void GameSetGlobalTimeScale(fixed lp_1);
0x50C - fixed GameGetGlobalTimeScale();
0x50D - string GameAttributeGameValue(string lp_1);
0x50E - string GameAttributePlayerValue(string lp_1, int lp_2);
0x50F - playergroup GameAttributePlayersForTeam(int lp_1);
0x510 - void GameSetSeed(int lp_1);
0x511 - void GameSetSeedLocked(bool lp_1);
0x512 - bool GameIsSeedLocked();
0x513 - void GameSetAbsoluteTimeRemaining(fixed lp_1);
0x514 - fixed GameGetAbsoluteTimeRemaining();
0x515 - void GameSetAbsoluteTimeRemainingPaused(bool lp_1);
0x516 - bool GameGetAbsoluteTimeRemainingPaused();
0x517 - void GamePauseAllCharges(bool lp_1);
0x518 - void GamePauseAllCooldowns(bool lp_1);
0x519 - void GameAddChargeRegen(string lp_1, fixed lp_2);
0x51A - void GameAddChargeRegenRemaining(string lp_1, fixed lp_2);
0x51B - fixed GameGetChargeRegen(string lp_1);
0x51C - void GameAddChargeRegenFull(string lp_1, fixed lp_2);
0x51D - fixed GameGetChargeRegenFull(string lp_1, bool lp_2);
0x51E - void GameAddChargeUsed(string lp_1, fixed lp_2);
0x51F - fixed GameGetChargeUsed(string lp_1);
0x520 - void GameAddCooldown(string lp_1, fixed lp_2);
0x521 - fixed GameGetCooldown(string lp_1);
0x522 - bool GameIsTestMap(bool lp_1);
0x523 - bool GameIsExaminable();
0x524 - int GameTestConfigType();
0x525 - bool GameIsOnline();
0x526 - bool GameIsMatchmade();
0x527 - bool GameIsCompetitive();
0x528 - bool GameIsPractice();
0x529 - bool GameIsCooperative();
0x52A - bool GameAreHeroDuplicatesAllowed();
0x52B - void GameSetNextMap(string lp_1);
0x52C - void GameSetNextCampaignIndex(playergroup lp_1, int lp_2);
0x52D - void SetNextMissionDifficulty(playergroup lp_1, int lp_2);
0x52E - bool GameIsTransitionMap();
0x52F - void GameSetTransitionMap(string lp_1);
0x530 - string GameTerrainSet();
0x531 - void GameWaitForResourcesToComplete();
0x532 - void GameOver(int lp_1, int lp_2, bool lp_3, bool lp_4);
0x533 - void RestartGame(playergroup lp_1);
0x534 - void KickFromGame(playergroup lp_1);
0x535 - void GameCheatAllow(int lp_1, bool lp_2);
0x536 - bool GameCheatIsAllowed(int lp_1);
0x537 - bool GameCheatsEnabled(int lp_1);
0x538 - bool GameDataIsFullyDownloaded(int lp_1);
0x539 - void GameSetPauseable(bool lp_1);
0x53A - void GameSetQuitOnQuitButton(bool lp_1);
0x53B - void TriggerAddEventMapInit(trigger lp_1);
0x53C - void TriggerAddEventSaveGame(trigger lp_1);
0x53D - void TriggerAddEventSaveGameDone(trigger lp_1);
0x53E - void TriggerAddEventLoadGameDone(trigger lp_1);
0x53F - void TriggerAddEventCheatUsed(trigger lp_1, int lp_2, int lp_3);
0x540 - void TriggerAddEventChatMessage(trigger lp_1, int lp_2, string lp_3, bool lp_4);
0x541 - string EventChatMessage(bool lp_1);
0x542 - int EventCheatUsed();
0x543 - void OnlineMapToMapLoad(int lp_1, playergroup lp_2, playergroup lp_3);
0x544 - text GameUserName(int lp_1);
0x545 - string GameUserHandle(int lp_1);
0x546 - void GameUserDisplayMessage(int lp_1, int lp_2, text lp_3);
0x547 - void GameUserClearMessages(int lp_1, int lp_2);
0x548 - int EventGameUser();
0x549 - int HelpPanelLastCreatedHelpItem();
0x54A - void HelpPanelSetHelpItemDarkenedWhenViewed(int lp_1, bool lp_2);
0x54B - void HelpPanelAddTip(playergroup lp_1, text lp_2, text lp_3, text lp_4, string lp_5);
0x54C - void HelpPanelAddHint(playergroup lp_1, text lp_2, text lp_3, string lp_4);
0x54D - void HelpPanelAddTutorial(playergroup lp_1, text lp_2, text lp_3, string lp_4, string lp_5, bool lp_6);
0x54E - void HelpPanelAddMessage(playergroup lp_1, text lp_2, text lp_3, string lp_4, soundlink lp_5);
0x54F - void HelpPanelDisplayPage(playergroup lp_1, int lp_2);
0x550 - void HelpPanelEnableTechTreeButton(playergroup lp_1, bool lp_2);
0x551 - void HelpPanelEnableTechGlossaryButton(playergroup lp_1, bool lp_2);
0x552 - void HelpPanelShowTechTreeRace(playergroup lp_1, string lp_2, bool lp_3);
0x553 - void HelpPanelDestroyHelpItem(int lp_1);
0x554 - void HelpPanelDestroyAllTips();
0x555 - void HelpPanelDestroyAllTutorials();
0x556 - void TipAlertPanelClear(playergroup lp_1);
0x557 - void SetHeroLeaderPanelEnabled(bool lp_1);
0x558 - void IntLoopBegin(int lp_1, int lp_2);
0x559 - void IntLoopStep();
0x55A - bool IntLoopDone();
0x55B - int IntLoopCurrent();
0x55C - int IntLoopCurrentDeprecated();
0x55D - void IntLoopEnd();
0x55E - void PlayerGroupLoopBegin(playergroup lp_1);
0x55F - void PlayerGroupLoopStep();
0x560 - bool PlayerGroupLoopDone();
0x561 - int PlayerGroupLoopCurrent();
0x562 - int PlayerGroupLoopCurrentDeprecated();
0x563 - void PlayerGroupLoopEnd();
0x564 - void UnitGroupLoopBegin(unitgroup lp_1);
0x565 - void UnitGroupLoopStep();
0x566 - bool UnitGroupLoopDone();
0x567 - unit UnitGroupLoopCurrent();
0x568 - unit UnitGroupLoopCurrentDeprecated();
0x569 - void UnitGroupLoopEnd();
0x56A - void BankBackupLoopBegin(bank lp_1, bool lp_2);
0x56B - void BankBackupLoopStep();
0x56C - bool BankBackupLoopDone();
0x56D - bank BankBackupLoopCurrent();
0x56E - void BankBackupLoopEnd();
0x56F - fixed Floor(fixed lp_1);
0x570 - fixed Ceiling(fixed lp_1);
0x571 - fixed Trunc(fixed lp_1);
0x572 - fixed Round(fixed lp_1);
0x573 - fixed SquareRoot(fixed lp_1);
0x574 - fixed Pow2(fixed lp_1);
0x575 - fixed Log2(fixed lp_1);
0x576 - fixed Pow(fixed lp_1, fixed lp_2);
0x577 - int FloorI(fixed lp_1);
0x578 - int CeilingI(fixed lp_1);
0x579 - int TruncI(fixed lp_1);
0x57A - int RoundI(fixed lp_1);
0x57B - int SquareRootI(fixed lp_1);
0x57C - int Pow2I(fixed lp_1);
0x57D - int Log2I(fixed lp_1);
0x57E - int PowI(fixed lp_1, fixed lp_2);
0x57F - fixed ModF(fixed lp_1, fixed lp_2);
0x580 - fixed MinF(fixed lp_1, fixed lp_2);
0x581 - fixed MaxF(fixed lp_1, fixed lp_2);
0x582 - fixed AbsF(fixed lp_1);
0x583 - int ModI(int lp_1, int lp_2);
0x584 - int MinI(int lp_1, int lp_2);
0x585 - int MaxI(int lp_1, int lp_2);
0x586 - int AbsI(int lp_1);
0x587 - fixed Sin(fixed lp_1);
0x588 - fixed Cos(fixed lp_1);
0x589 - fixed Tan(fixed lp_1);
0x58A - fixed ASin(fixed lp_1);
0x58B - fixed ACos(fixed lp_1);
0x58C - fixed ATan(fixed lp_1);
0x58D - fixed ATan2(fixed lp_1, fixed lp_2);
0x58E - int RandomInt(int lp_1, int lp_2);
0x58F - fixed RandomFixed(fixed lp_1, fixed lp_2);
0x590 - marker Marker(string lp_1);
0x591 - marker MarkerCastingPlayer(string lp_1, int lp_2);
0x592 - marker MarkerCastingUnit(string lp_1, unit lp_2);
0x593 - void MarkerSetCastingPlayer(marker lp_1, int lp_2);
0x594 - int MarkerGetCastingPlayer(marker lp_1);
0x595 - void MarkerSetCastingUnit(marker lp_1, unit lp_2);
0x596 - unit MarkerGetCastingUnit(marker lp_1);
0x597 - void MarkerSetMatchFlag(marker lp_1, int lp_2, bool lp_3);
0x598 - bool MarkerGetMatchFlag(marker lp_1, int lp_2);
0x599 - void MarkerSetMismatchFlag(marker lp_1, int lp_2, bool lp_3);
0x59A - bool MarkerGetMismatchFlag(marker lp_1, int lp_2);
0x59B - void MeleeInitResourcesForPlayer(int lp_1, string lp_2);
0x59C - void MeleeInitResources();
0x59D - void MeleeInitUnitsForPlayer(int lp_1, string lp_2, point lp_3);
0x59E - void MeleeInitUnits();
0x59F - void MeleeInitAI();
0x5A0 - void MeleeSetOption(int lp_1, int lp_2, bool lp_3);
0x5A1 - bool MeleeGetOption(int lp_1, int lp_2);
0x5A2 - void MeleeInitOptions();
0x5A3 - int MercenaryCreate(playergroup lp_1, int lp_2);
0x5A4 - int MercenaryLastCreated();
0x5A5 - void MercenaryDestroy(int lp_1);
0x5A6 - void MercenarySetPlayerGroup(int lp_1, playergroup lp_2);
0x5A7 - void MercenarySetState(int lp_1, int lp_2);
0x5A8 - void MercenarySetCost(int lp_1, int lp_2);
0x5A9 - void MercenarySetTitleText(int lp_1, text lp_2);
0x5AA - void MercenarySetDescriptionText(int lp_1, text lp_2);
0x5AB - void MercenarySetCostText(int lp_1, text lp_2);
0x5AC - void MercenarySetUnitText(int lp_1, text lp_2);
0x5AD - void MercenarySetAvailabilityText(int lp_1, text lp_2);
0x5AE - void MercenarySetSpecialText(int lp_1, text lp_2);
0x5AF - void MercenarySetTooltipText(int lp_1, text lp_2);
0x5B0 - void MercenarySetModelLink(int lp_1, string lp_2);
0x5B1 - void MercenarySetScenePath(int lp_1, string lp_2);
0x5B2 - void MercenarySetImageFilePath(int lp_1, string lp_2);
0x5B3 - void MercenarySetRecentlyPurchased(int lp_1, bool lp_2);
0x5B4 - void MercenaryPurchase(int lp_1);
0x5B5 - bool MercenaryIsRecentlyPurchased(int lp_1);
0x5B6 - void MercenarySetSelected(playergroup lp_1, int lp_2);
0x5B7 - int MercenaryGetSelected(int lp_1);
0x5B8 - void MercenaryPanelSetCloseButtonEnabled(playergroup lp_1, bool lp_2);
0x5B9 - void MercenaryPanelSetDismissButtonEnabled(playergroup lp_1, bool lp_2);
0x5BA - void TriggerAddEventMercenaryPanelExit(trigger lp_1, int lp_2);
0x5BB - void TriggerAddEventMercenaryPanelPurchase(trigger lp_1, int lp_2);
0x5BC - void TriggerAddEventMercenaryPanelSelectionChanged(trigger lp_1, int lp_2, int lp_3);
0x5BD - void MinimapPing(playergroup lp_1, point lp_2, fixed lp_3, color lp_4);
0x5BE - void MinimapPingPossibleEnemyStartLocations(fixed lp_1, string lp_2, color lp_3);
0x5BF - void PerfTestStart(text lp_1);
0x5C0 - void PerfTestStop();
0x5C1 - void PerfTestGetFPS();
0x5C2 - void UnitStatsStart(text lp_1, text lp_2, text lp_3);
0x5C3 - void UnitStatsStop();
0x5C4 - void EngineReset();
0x5C5 - void StartProfileRun(text lp_1);
0x5C6 - void StopProfileRun();
0x5C7 - void WaitForProfilerLoggingToEnd();
0x5C8 - void MoviePlayAfterGame(playergroup lp_1, string lp_2);
0x5C9 - void MovieStartRecording(string lp_1);
0x5CA - void MovieStopRecording();
0x5CB - void MovieAddSubTitle(string lp_1, int lp_2, int lp_3);
0x5CC - void MovieAddSubTitleText(text lp_1, int lp_2, int lp_3);
0x5CD - void MovieAddTriggerFunction(string lp_1, int lp_2);
0x5CE - void TriggerAddEventMovieStarted(trigger lp_1, int lp_2);
0x5CF - void TriggerAddEventMovieFinished(trigger lp_1, int lp_2);
0x5D0 - void TriggerAddEventMovieFunction(trigger lp_1, int lp_2, string lp_3);
0x5D1 - int ObjectiveCreate(text lp_1, text lp_2, int lp_3, bool lp_4);
0x5D2 - int ObjectiveCreateForPlayers(text lp_1, text lp_2, int lp_3, bool lp_4, playergroup lp_5);
0x5D3 - int ObjectiveLastCreated();
0x5D4 - void ObjectiveDestroy(int lp_1);
0x5D5 - void ObjectiveDestroyAll(playergroup lp_1);
0x5D6 - void ObjectiveShow(int lp_1, playergroup lp_2, bool lp_3);
0x5D7 - bool ObjectiveVisible(int lp_1, int lp_2);
0x5D8 - void ObjectiveSetName(int lp_1, text lp_2);
0x5D9 - text ObjectiveGetName(int lp_1);
0x5DA - void ObjectiveSetDescription(int lp_1, text lp_2);
0x5DB - text ObjectiveGetDescription(int lp_1);
0x5DC - void ObjectiveSetState(int lp_1, int lp_2);
0x5DD - int ObjectiveGetState(int lp_1);
0x5DE - void ObjectiveSetPlayerGroup(int lp_1, playergroup lp_2);
0x5DF - playergroup ObjectiveGetPlayerGroup(int lp_1);
0x5E0 - void ObjectiveSetPrimary(int lp_1, bool lp_2);
0x5E1 - bool ObjectiveGetPrimary(int lp_1);
0x5E2 - void ObjectiveSetPriority(int lp_1, int lp_2);
0x5E3 - int ObjectiveGetPriority(int lp_1);
0x5E4 - void ObjectiveSetFirst(int lp_1);
0x5E5 - void ObjectiveSetLast(int lp_1);
0x5E6 - void ObjectiveSetAfter(int lp_1, int lp_2);
0x5E7 - void ObjectiveSetBefore(int lp_1, int lp_2);
0x5E8 - abilcmd AbilityCommand(string lp_1, int lp_2);
0x5E9 - string AbilityCommandGetAbility(abilcmd lp_1);
0x5EA - int AbilityCommandGetCommand(abilcmd lp_1);
0x5EB - int AbilityCommandGetAction(abilcmd lp_1);
0x5EC - order Order(abilcmd lp_1);
0x5ED - order OrderTargetingPoint(abilcmd lp_1, point lp_2);
0x5EE - order OrderTargetingRelativePoint(abilcmd lp_1, point lp_2);
0x5EF - order OrderTargetingUnit(abilcmd lp_1, unit lp_2);
0x5F0 - order OrderTargetingUnitGroup(abilcmd lp_1, unitgroup lp_2);
0x5F1 - order OrderTargetingItem(abilcmd lp_1, unit lp_2);
0x5F2 - order OrderSetAutoCast(abilcmd lp_1, bool lp_2);
0x5F3 - void OrderSetAbilityCommand(order lp_1, abilcmd lp_2);
0x5F4 - abilcmd OrderGetAbilityCommand(order lp_1);
0x5F5 - void OrderSetPlayer(order lp_1, int lp_2);
0x5F6 - int OrderGetPlayer(order lp_1);
0x5F7 - int OrderGetTargetType(order lp_1);
0x5F8 - bool OrderSetTargetPlacement(order lp_1, point lp_2, unit lp_3, string lp_4);
0x5F9 - void OrderSetTargetPoint(order lp_1, point lp_2);
0x5FA - point OrderGetTargetPoint(order lp_1);
0x5FB - point OrderGetTargetPosition(order lp_1);
0x5FC - void OrderSetTargetUnit(order lp_1, unit lp_2);
0x5FD - unit OrderGetTargetUnit(order lp_1);
0x5FE - void OrderSetTargetPassenger(order lp_1, unit lp_2);
0x5FF - void OrderSetTargetItem(order lp_1, unit lp_2);
0x600 - unit OrderGetTargetItem(order lp_1);
0x601 - void OrderSetFlag(order lp_1, int lp_2, bool lp_3);
0x602 - bool OrderGetFlag(order lp_1, int lp_2);
0x603 - int PathCreateForUnit(playergroup lp_1, unit lp_2);
0x604 - int PathCreateForUnitType(playergroup lp_1, string lp_2, int lp_3, point lp_4);
0x605 - int PathLastCreated();
0x606 - void PathDestroy(int lp_1);
0x607 - void PathDestroyAll(playergroup lp_1);
0x608 - void PathSetDestinationPoint(int lp_1, point lp_2);
0x609 - point PathGetDestinationPoint(int lp_1);
0x60A - void PathSetDestinationUnit(int lp_1, unit lp_2);
0x60B - unit PathGetDestinationUnit(int lp_1);
0x60C - void PathSetSourcePoint(int lp_1, point lp_2);
0x60D - point PathGetSourcePoint(int lp_1);
0x60E - void PathSetSourceUnit(int lp_1, unit lp_2);
0x60F - unit PathGetSourceUnit(int lp_1);
0x610 - void PathSetLineTexture(int lp_1, int lp_2, string lp_3);
0x611 - string PathGetLineTexture(int lp_1, int lp_2);
0x612 - void PathSetLineTileLength(int lp_1, int lp_2, fixed lp_3);
0x613 - fixed PathGetLineTileLength(int lp_1, int lp_2);
0x614 - void PathSetLineWidth(int lp_1, int lp_2, fixed lp_3);
0x615 - fixed PathGetLineWidth(int lp_1, int lp_2);
0x616 - void PathSetStepModel(int lp_1, int lp_2, string lp_3);
0x617 - string PathGetStepModel(int lp_1, int lp_2);
0x618 - void PathSetStepModelScale(int lp_1, int lp_2, fixed lp_3);
0x619 - fixed PathGetStepModelScale(int lp_1, int lp_2);
0x61A - void PathSetStepMidpoint(int lp_1, int lp_2, fixed lp_3);
0x61B - fixed PathGetStepMidpoint(int lp_1, int lp_2);
0x61C - void PathSetColor(int lp_1, int lp_2, color lp_3);
0x61D - color PathGetColor(int lp_1, int lp_2);
0x61E - void PathSetVisible(int lp_1, int lp_2, bool lp_3);
0x61F - bool PathGetVisible(int lp_1, int lp_2);
0x620 - unit PathGetUnit(int lp_1);
0x621 - string PathGetUnitType(int lp_1);
0x622 - void PathSetAbilClassFilter(int lp_1, int lp_2, int lp_3);
0x623 - void PathClearWayPoints(int lp_1);
0x624 - void PathAddWayPoint(int lp_1, point lp_2);
0x625 - void PathSetMinimumLinearDistance(int lp_1, fixed lp_2);
0x626 - fixed PathGetMinimumLinearDistance(int lp_1);
0x627 - void PathSetMinimumTravelDistance(int lp_1, fixed lp_2);
0x628 - fixed PathGetMinimumTravelDistance(int lp_1);
0x629 - void PathSetMinimumStepCount(int lp_1, int lp_2);
0x62A - int PathGetMinimumStepCount(int lp_1);
0x62B - void PathAddNoFlyZone(point lp_1, fixed lp_2, fixed lp_3);
0x62C - void PathRemoveNoFlyZonesInRegion(region lp_1);
0x62D - int PingCreate(playergroup lp_1, string lp_2, point lp_3, color lp_4, fixed lp_5);
0x62E - int PingCreateWithPlayerId(playergroup lp_1, string lp_2, point lp_3, color lp_4, fixed lp_5, int lp_6);
0x62F - int PingCreateFromData(playergroup lp_1, string lp_2, point lp_3);
0x630 - int PingLastCreated();
0x631 - void PingDestroy(int lp_1);
0x632 - void PingDestroyAll();
0x633 - void PingSetPlayerPingsShown(playergroup lp_1, bool lp_2);
0x634 - void PingSetPlayerGroup(int lp_1, playergroup lp_2);
0x635 - playergroup PingGetPlayerGroup(int lp_1);
0x636 - void PingSetModel(int lp_1, string lp_2);
0x637 - void PingSetPosition(int lp_1, point lp_2);
0x638 - point PingGetPosition(int lp_1);
0x639 - void PingSetDepth(int lp_1, fixed lp_2);
0x63A - fixed PingGetDepth(int lp_1);
0x63B - void PingSetScale(int lp_1, fixed lp_2);
0x63C - fixed PingGetScale(int lp_1);
0x63D - void PingSetRotation(int lp_1, fixed lp_2);
0x63E - fixed PingGetRotation(int lp_1);
0x63F - void PingSetColor(int lp_1, color lp_2);
0x640 - color PingGetColor(int lp_1);
0x641 - void PingSetDuration(int lp_1, fixed lp_2);
0x642 - fixed PingGetDuration(int lp_1);
0x643 - void PingSetUnit(int lp_1, unit lp_2);
0x644 - unit PingGetUnit(int lp_1);
0x645 - void PingSetTooltip(int lp_1, text lp_2);
0x646 - text PingGetTooltip(int lp_1);
0x647 - void PingSetVisible(int lp_1, bool lp_2);
0x648 - bool PingIsVisible(int lp_1);
0x649 - void PingSetUseUnitTeamColor(int lp_1, bool lp_2);
0x64A - void PingSetUseUnitVisibility(int lp_1, bool lp_2);
0x64B - void PingSetObserver(int lp_1, bool lp_2);
0x64C - void PingSetUsePlayerVision(int lp_1, bool lp_2);
0x64D - void TriggerAddEventPing(trigger lp_1, int lp_2);
0x64E - unit EventPingUnit();
0x64F - string EventPingUnitType();
0x650 - int EventPingUnitControlPlayer();
0x651 - int EventPingUnitUpkeepPlayer();
0x652 - point EventPingUnitPosition();
0x653 - bool EventPingUnitIsUnderConstruction();
0x654 - point EventPingPoint();
0x655 - bool EventPingedMinimap();
0x656 - int EventPingOption();
0x657 - int PlanetCreate(playergroup lp_1, int lp_2);
0x658 - int PlanetLastCreated();
0x659 - void PlanetDestroy(int lp_1);
0x65A - void PlanetDestroyAll(playergroup lp_1);
0x65B - void PlanetSetSelected(playergroup lp_1, int lp_2);
0x65C - int PlanetGetSelected(int lp_1);
0x65D - void PlanetClearSelected(playergroup lp_1);
0x65E - void PlanetSetPlayerGroup(int lp_1, playergroup lp_2);
0x65F - void PlanetSetState(int lp_1, int lp_2);
0x660 - void PlanetSetPlanetName(int lp_1, text lp_2);
0x661 - void PlanetSetDescriptionText(int lp_1, text lp_2);
0x662 - void PlanetSetTooltipText(int lp_1, text lp_2);
0x663 - void PlanetSetContactTooltipText(int lp_1, text lp_2);
0x664 - void PlanetSetTechnologyTooltipText(int lp_1, text lp_2);
0x665 - void PlanetSetMissionTitle(int lp_1, text lp_2);
0x666 - void PlanetSetMissionName(int lp_1, text lp_2);
0x667 - void PlanetSetPrimaryObjectiveTitle(int lp_1, text lp_2);
0x668 - void PlanetSetPrimaryObjectiveText(int lp_1, text lp_2);
0x669 - void PlanetSetSecondaryObjectiveTitle(int lp_1, text lp_2);
0x66A - void PlanetSetSecondaryObjectiveText(int lp_1, text lp_2);
0x66B - void PlanetSetRewardTitle(int lp_1, text lp_2);
0x66C - void PlanetSetRewardText(int lp_1, text lp_2);
0x66D - void PlanetSetResearchTitle(int lp_1, text lp_2);
0x66E - void PlanetSetResearchText(int lp_1, text lp_2);
0x66F - void PlanetSetBonusTitle(int lp_1, text lp_2);
0x670 - void PlanetSetBonusText(int lp_1, text lp_2);
0x671 - void PlanetSetPlanetText(int lp_1, text lp_2);
0x672 - void PlanetSetTechnologyTitle(int lp_1, text lp_2);
0x673 - void PlanetSetTechnologyName(int lp_1, text lp_2);
0x674 - void PlanetSetTechnologyText(int lp_1, text lp_2);
0x675 - void PlanetSetContactTitle(int lp_1, text lp_2);
0x676 - void PlanetSetContactName(int lp_1, text lp_2);
0x677 - void PlanetSetContactModelLink(int lp_1, string lp_2);
0x678 - void PlanetSetContactActorLink(int lp_1, string lp_2);
0x679 - void PlanetSetBackgroundModelLink(int lp_1, string lp_2);
0x67A - void PlanetSetPlanetModelLink(int lp_1, string lp_2);
0x67B - void PlanetSetTechnologyIconFilePath(int lp_1, string lp_2);
0x67C - void PlanetSetTechnologyUnitLink(int lp_1, string lp_2);
0x67D - void PlanetPanelSetContactButtonState(playergroup lp_1, int lp_2);
0x67E - int PlanetPanelGetContactButtonState(int lp_1);
0x67F - void PlanetPanelSetBackButtonEnabled(playergroup lp_1, bool lp_2);
0x680 - void PlanetPanelSetDismissButtonEnabled(playergroup lp_1, bool lp_2);
0x681 - void PlanetPanelSetBackButtonText(playergroup lp_1, text lp_2);
0x682 - void PlanetPanelSetBackButtonShortcut(playergroup lp_1, text lp_2);
0x683 - void PlanetPanelSetBackButtonTooltip(playergroup lp_1, text lp_2);
0x684 - void PlanetPanelSetBackgroundImage(playergroup lp_1, string lp_2);
0x685 - void TriggerAddEventPlanetMissionLaunched(trigger lp_1, int lp_2);
0x686 - void TriggerAddEventPlanetMissionSelected(trigger lp_1, int lp_2, int lp_3);
0x687 - void TriggerAddEventPlanetPanelCanceled(trigger lp_1, int lp_2);
0x688 - void TriggerAddEventPlanetPanelReplayPressed(trigger lp_1, int lp_2);
0x689 - void TriggerAddEventPlanetPanelBirthComplete(trigger lp_1, int lp_2);
0x68A - void TriggerAddEventPlanetPanelDeathComplete(trigger lp_1, int lp_2);
0x68B - int EventPlanetPanelMissionSelected();
0x68C - int EventPlanetPanelDifficultySelected();
0x68D - string TalentTreeGetHeroTalentLink(int lp_1, int lp_2);
0x68E - bool TalentTreeCanSelectHeroTalentTree(int lp_1, int lp_2);
0x68F - void TalentTreeSetSelectedHeroTalentTree(int lp_1, int lp_2);
0x690 - int TalentTreeGetSelectedHeroTalentTree(int lp_1, int lp_2);
0x691 - int TalentTreeGetSelectedHeroTalentTreeColumn(int lp_1, int lp_2);
0x692 - void TalentTreeClearTier(int lp_1, int lp_2);
0x693 - bool TalentTreeAllowed(int lp_1, int lp_2);
0x694 - void SetTalentTierEnabled(int lp_1, bool lp_2);
0x695 - void SetTalentUpgradeRequired(bool lp_1);
0x696 - void SetTalentTreeHeroLevel(int lp_1, int lp_2);
0x697 - void SetTalentsEnabled(bool lp_1);
0x698 - void SetTalentTreeSelectionPanelDismissAllowed(bool lp_1);
0x699 - void SetTalentTreeSelectionPanelAutoShow(bool lp_1);
0x69A - void SetTalentTreePauseGameWhenSelectionPanelShown(bool lp_1);
0x69B - void TriggerAddEventHeroTalentTreeSelected(trigger lp_1, int lp_2);
0x69C - void TriggerAddEventHeroTalentTreeSelectionPanelShown(trigger lp_1, int lp_2);
0x69D - void TriggerAddEventHeroTalentTreeSelectionPanelHidden(trigger lp_1, int lp_2);
0x69E - void VictoryPanelSetVictoryText(text lp_1);
0x69F - void VictoryPanelSetMissionTitle(text lp_1);
0x6A0 - void VictoryPanelSetMissionText(text lp_1);
0x6A1 - void VictoryPanelSetMissionTimeTitle(text lp_1);
0x6A2 - void VictoryPanelSetMissionTimeText(text lp_1);
0x6A3 - void VictoryPanelSetRewardTitle(text lp_1);
0x6A4 - void VictoryPanelSetRewardText(text lp_1);
0x6A5 - void VictoryPanelSetRewardCredits(int lp_1);
0x6A6 - void VictoryPanelSetAchievementsTitle(text lp_1);
0x6A7 - void VictoryPanelSetStatisticsTitle(text lp_1);
0x6A8 - void VictoryPanelSetCustomStatisticText(text lp_1);
0x6A9 - void VictoryPanelSetCustomStatisticValue(text lp_1);
0x6AA - void VictoryPanelSetPlanetModelLink(string lp_1);
0x6AB - void VictoryPanelSetBackgroundFilePath(string lp_1);
0x6AC - void VictoryPanelSetSummaryBackgroundFilePath(string lp_1);
0x6AD - void VictoryPanelAddCustomStatisticLine(text lp_1, text lp_2);
0x6AE - void VictoryPanelClearCustomStatisticTable();
0x6AF - void VictoryPanelAddTrackedStatistic(string lp_1);
0x6B0 - void VictoryPanelAddAchievement(string lp_1);
0x6B1 - void TriggerAddEventVictoryPanelExit(trigger lp_1, int lp_2);
0x6B2 - void TriggerAddEventVictoryPanelPlayMissionAgain(trigger lp_1, int lp_2);
0x6B3 - int EventVictoryPanelDifficultySelected();
0x6B4 - void PlayerModifyPropertyInt(int lp_1, int lp_2, int lp_3, int lp_4);
0x6B5 - void PlayerModifyPropertyFixed(int lp_1, int lp_2, int lp_3, fixed lp_4);
0x6B6 - int PlayerGetPropertyInt(int lp_1, int lp_2);
0x6B7 - fixed PlayerGetPropertyFixed(int lp_1, int lp_2);
0x6B8 - int PlayerStatus(int lp_1);
0x6B9 - int PlayerType(int lp_1);
0x6BA - text PlayerName(int lp_1);
0x6BB - string PlayerHandle(int lp_1);
0x6BC - string PlayerRace(int lp_1);
0x6BD - string PlayerHero(int lp_1);
0x6BE - string PlayerSkin(int lp_1);
0x6BF - string PlayerMount(int lp_1);
0x6C0 - string PlayerSpray(int lp_1, int lp_2);
0x6C1 - string PlayerArtifact(int lp_1, int lp_2);
0x6C2 - int PlayerArtifactRank(int lp_1, int lp_2);
0x6C3 - string PlayerCommander(int lp_1);
0x6C4 - int PlayerCommanderLevel(int lp_1);
0x6C5 - int PlayerCommanderMasteryLevel(int lp_1);
0x6C6 - int PlayerCommanderMasteryTalentRank(int lp_1, int lp_2);
0x6C7 - int PlayerCommanderSelectedPrestige(int lp_1);
0x6C8 - int PlayerDifficulty(int lp_1);
0x6C9 - int PlayerBrutalPlusDifficulty(int lp_1);
0x6CA - int PlayerRetryMutation(int lp_1, int lp_2);
0x6CB - int PlayerACEnemyWaveType(int lp_1);
0x6CC - void PlayerSetDifficulty(int lp_1, int lp_2);
0x6CD - void PlayerSetLighting(int lp_1, string lp_2, fixed lp_3);
0x6CE - void PlayerSetToDLighting(int lp_1, string lp_2);
0x6CF - point PlayerStartLocation(int lp_1);
0x6D0 - int PlayerAIBuildNumber(int lp_1);
0x6D1 - bool PlayerAIControlAllowed(int lp_1);
0x6D2 - void PlayerSetAllowAIControl(int lp_1, bool lp_2);
0x6D3 - bool PlayerIsUnderAIControl(int lp_1);
0x6D4 - void PlayerSetUnderAIControl(int lp_1, bool lp_2);
0x6D5 - void PlayerOptionOverride(int lp_1, string lp_2, string lp_3);
0x6D6 - bool PlayerHasLicense(int lp_1, int lp_2);
0x6D7 - bool PlayerHasAccessTo(int lp_1, string lp_2);
0x6D8 - bool PlayerHasReward(int lp_1, string lp_2);
0x6D9 - void PlayerAddTalent(int lp_1, string lp_2);
0x6DA - void PlayerRemoveTalent(int lp_1, string lp_2);
0x6DB - bool PlayerHasTalent(int lp_1, string lp_2);
0x6DC - void PlayerAddResponse(int lp_1, string lp_2);
0x6DD - void PlayerRemoveResponse(int lp_1, string lp_2);
0x6DE - void PlayerClearResponse(int lp_1, int lp_2, int lp_3);
0x6DF - void PlayerSetBounds(int lp_1, region lp_2);
0x6E0 - void PlayerSetColorIndex(int lp_1, int lp_2, bool lp_3);
0x6E1 - int PlayerGetColorIndex(int lp_1, bool lp_2);
0x6E2 - text PlayerColorName(int lp_1);
0x6E3 - void PlayerSetAlliance(int lp_1, int lp_2, int lp_3, bool lp_4);
0x6E4 - bool PlayerGetAlliance(int lp_1, int lp_2, int lp_3);
0x6E5 - void PlayerSetState(int lp_1, int lp_2, bool lp_3);
0x6E6 - bool PlayerGetState(int lp_1, int lp_2);
0x6E7 - void PlayerSetRace(int lp_1, string lp_2);
0x6E8 - void PlayerSetHero(int lp_1, string lp_2);
0x6E9 - void PlayerSetSkin(int lp_1, string lp_2);
0x6EA - void PlayerSetConsoleSkin(int lp_1, string lp_2);
0x6EB - void PlayerSetMount(int lp_1, string lp_2);
0x6EC - void PlayerSetSpray(int lp_1, int lp_2, string lp_3);
0x6ED - void PlayerSetCommander(int lp_1, string lp_2);
0x6EE - void PlayerSetCommanderLevel(int lp_1, int lp_2);
0x6EF - void PlayerSetCommanderMasteryLevel(int lp_1, int lp_2);
0x6F0 - void PlayerAddReward(int lp_1, string lp_2);
0x6F1 - void PlayerAddLabel(int lp_1, string lp_2);
0x6F2 - bool PlayerRemoveLabel(int lp_1, string lp_2);
0x6F3 - void PlayerRemoveAllLabels(int lp_1);
0x6F4 - bool PlayerHasLabel(int lp_1, string lp_2);
0x6F5 - void PlayerSetDeathTimer(int lp_1, timer lp_2);
0x6F6 - void PlayerApplySkin(int lp_1, string lp_2, bool lp_3);
0x6F7 - string PlayerGetHotkeyProfile(int lp_1);
0x6F8 - void PlayerBeaconClearTarget(int lp_1, int lp_2);
0x6F9 - bool PlayerBeaconIsAutoCast(int lp_1, int lp_2);
0x6FA - bool PlayerBeaconIsFromUser(int lp_1, int lp_2);
0x6FB - bool PlayerBeaconIsSet(int lp_1, int lp_2);
0x6FC - point PlayerBeaconGetTargetPoint(int lp_1, int lp_2);
0x6FD - unit PlayerBeaconGetTargetUnit(int lp_1, int lp_2);
0x6FE - void PlayerBeaconSetAutoCast(int lp_1, int lp_2, bool lp_3);
0x6FF - void PlayerBeaconSetTargetPoint(int lp_1, int lp_2, point lp_3, bool lp_4);
0x700 - void PlayerBeaconSetTargetUnit(int lp_1, int lp_2, unit lp_3, bool lp_4);
0x701 - void PlayerBeaconAlert(int lp_1, int lp_2, string lp_3, text lp_4);
0x702 - int PlayerBeaconGetNumAllies(int lp_1);
0x703 - int PlayerBeaconGetAllyPlayerId(int lp_1, int lp_2);
0x704 - void PlayerBeaconSelectDropoff(int lp_1);
0x705 - int PlayerBeaconRequestedMinerals(int lp_1);
0x706 - int PlayerBeaconRequestedVespene(int lp_1);
0x707 - void PlayerBeaconBuildMenuSetSlotInfo(int lp_1, int lp_2, int lp_3, text lp_4, text lp_5, text lp_6);
0x708 - void PlayerBeaconBuildMenuDisableSlotInfo(int lp_1, int lp_2, int lp_3, bool lp_4);
0x709 - void PlayerBeaconBuildMenuClearSlotInfo(int lp_1, int lp_2, int lp_3);
0x70A - void PlayerBeaconBuildMenuCurrentSet(int lp_1, int lp_2, int lp_3);
0x70B - int PlayerBeaconBuildMenuCurrentGet(int lp_1, int lp_2);
0x70C - bool PlayerBeaconBuildMenuWasFromPlayer(int lp_1, int lp_2);
0x70D - void PlayerPauseAllCharges(int lp_1, bool lp_2);
0x70E - void PlayerPauseAllCooldowns(int lp_1, bool lp_2);
0x70F - void PlayerAddChargeRegen(int lp_1, string lp_2, fixed lp_3);
0x710 - void PlayerAddChargeRegenRemaining(int lp_1, string lp_2, fixed lp_3);
0x711 - fixed PlayerGetChargeRegen(int lp_1, string lp_2);
0x712 - void PlayerAddChargeRegenFull(int lp_1, string lp_2, fixed lp_3);
0x713 - fixed PlayerGetChargeRegenFull(int lp_1, string lp_2, bool lp_3);
0x714 - void PlayerAddChargeUsed(int lp_1, string lp_2, fixed lp_3);
0x715 - fixed PlayerGetChargeUsed(int lp_1, string lp_2);
0x716 - void PlayerAddCooldown(int lp_1, string lp_2, fixed lp_3);
0x717 - fixed PlayerGetCooldown(int lp_1, string lp_2);
0x718 - void PlayerCreateEffectPoint(int lp_1, string lp_2, point lp_3);
0x719 - void PlayerCreateEffectUnit(int lp_1, string lp_2, unit lp_3);
0x71A - int PlayerValidateEffectPoint(int lp_1, string lp_2, point lp_3);
0x71B - int PlayerValidateEffectUnit(int lp_1, string lp_2, unit lp_3);
0x71C - void PlayerScoreValueEnableAll(int lp_1, bool lp_2);
0x71D - void PlayerScoreValueEnable(int lp_1, string lp_2, bool lp_3);
0x71E - fixed PlayerScoreValueGetAsFixed(int lp_1, string lp_2);
0x71F - int PlayerScoreValueGetAsInt(int lp_1, string lp_2);
0x720 - void PlayerScoreValueSetFromFixed(int lp_1, string lp_2, fixed lp_3);
0x721 - void PlayerScoreValueSetFromInt(int lp_1, string lp_2, int lp_3);
0x722 - void TriggerAddEventPlayerAllianceChange(trigger lp_1, int lp_2);
0x723 - void TriggerAddEventPlayerJoin(trigger lp_1, int lp_2);
0x724 - void TriggerAddEventPlayerLeft(trigger lp_1, int lp_2, int lp_3);
0x725 - void TriggerAddEventPlayerPropChange(trigger lp_1, int lp_2, int lp_3);
0x726 - void TriggerAddEventPlayerAIWave(trigger lp_1, int lp_2);
0x727 - void TriggerAddEventPlayerEffectUsed(trigger lp_1, int lp_2, string lp_3);
0x728 - void TriggerAddEventPlayerEffectUsedFromScope(trigger lp_1, int lp_2, string lp_3);
0x729 - int EventPlayer();
0x72A - int EventPlayerProperty();
0x72B - int EventPlayerPropertyChangeInt();
0x72C - fixed EventPlayerPropertyChangeFixed();
0x72D - string EventPlayerEffectUsed();
0x72E - point EventPlayerEffectUsedPoint(int lp_1);
0x72F - unit EventPlayerEffectUsedUnit(int lp_1);
0x730 - unit EventPlayerEffectUsedItem();
0x731 - unit EventPlayerEffectUsedUnitImpact();
0x732 - unit EventPlayerEffectUsedUnitLaunch();
0x733 - int EventPlayerEffectUsedUnitOwner(int lp_1);
0x734 - string EventPlayerEffectUsedUnitType(int lp_1);
0x735 - string EventPlayerEffectUsedItemType();
0x736 - int EventPlayerEffectUsedAmountInt(int lp_1, bool lp_2);
0x737 - fixed EventPlayerEffectUsedAmountFixed(int lp_1, bool lp_2);
0x738 - string EventPlayerEffectUsedAbil();
0x739 - string EventPlayerEffectUsedWeapon();
0x73A - string EventPlayerEffectUsedSourceBehavior();
0x73B - wave EventPlayerWave();
0x73C - text DifficultyName(int lp_1);
0x73D - text DifficultyNameCampaign(int lp_1);
0x73E - bool DifficultyEnabled(int lp_1);
0x73F - int DifficultyAPM(int lp_1);
0x740 - void TriggerAddEventUpgradeLevelChanged(trigger lp_1, int lp_2);
0x741 - int EventUpgradeLevelDelta();
0x742 - string EventUpgradeName();
0x743 - int ObservedPlayerId();
0x744 - playergroup PlayerGroupEmpty();
0x745 - playergroup PlayerGroupCopy(playergroup lp_1);
0x746 - playergroup PlayerGroupAll();
0x747 - playergroup PlayerGroupActive();
0x748 - playergroup PlayerGroupSingle(int lp_1);
0x749 - playergroup PlayerGroupAlliance(int lp_1, int lp_2);
0x74A - void PlayerGroupClear(playergroup lp_1);
0x74B - void PlayerGroupAdd(playergroup lp_1, int lp_2);
0x74C - void PlayerGroupRemove(playergroup lp_1, int lp_2);
0x74D - int PlayerGroupCount(playergroup lp_1);
0x74E - int PlayerGroupPlayer(playergroup lp_1, int lp_2);
0x74F - int PlayerGroupNextPlayer(playergroup lp_1, int lp_2);
0x750 - bool PlayerGroupHasPlayer(playergroup lp_1, int lp_2);
0x751 - point Point(fixed lp_1, fixed lp_2);
0x752 - point PointWithOffset(point lp_1, fixed lp_2, fixed lp_3);
0x753 - point PointWithOffsetPolar(point lp_1, fixed lp_2, fixed lp_3);
0x754 - point PointFromId(int lp_1);
0x755 - point PointFromName(string lp_1);
0x756 - fixed PointGetX(point lp_1);
0x757 - fixed PointGetY(point lp_1);
0x758 - void PointSet(point lp_1, point lp_2);
0x759 - fixed PointGetFacing(point lp_1);
0x75A - void PointSetFacing(point lp_1, fixed lp_2);
0x75B - fixed PointGetHeight(point lp_1);
0x75C - void PointSetHeight(point lp_1, fixed lp_2);
0x75D - bool PointsInRange(point lp_1, point lp_2, fixed lp_3);
0x75E - fixed AngleBetweenPoints(point lp_1, point lp_2);
0x75F - fixed DistanceBetweenPoints(point lp_1, point lp_2);
0x760 - fixed DistanceSquaredBetweenPoints(point lp_1, point lp_2);
0x761 - int PointPathingCost(point lp_1, point lp_2);
0x762 - fixed PointPathingCliffLevel(point lp_1);
0x763 - bool PointPathingPassable(point lp_1);
0x764 - bool PointPathingIsConnected(point lp_1, point lp_2);
0x765 - point PointReflect(point lp_1, point lp_2, fixed lp_3);
0x766 - point PointInterpolate(point lp_1, point lp_2, fixed lp_3);
0x767 - point MidPoint(point lp_1, point lp_2);
0x768 - int PortraitCreate(int lp_1, int lp_2, int lp_3, int lp_4, int lp_5, string lp_6, string lp_7, string lp_8, bool lp_9, bool lp_10);
0x769 - int PortraitLastCreated();
0x76A - void PortraitDestroy(int lp_1);
0x76B - void PortraitDestroyAll();
0x76C - void PortraitWaitForLoad(int lp_1);
0x76D - int PortraitGetGame();
0x76E - int PortraitGetPlanetPanel();
0x76F - int PortraitGetTriggerControl(int lp_1);
0x770 - void PortraitSetModel(int lp_1, string lp_2, bool lp_3);
0x771 - void PortraitSetModelAnim(int lp_1, string lp_2, string lp_3, int lp_4, bool lp_5);
0x772 - void PortraitSetAnim(int lp_1, string lp_2);
0x773 - void PortraitSetCamera(int lp_1, string lp_2);
0x774 - void PortraitSetSize(int lp_1, int lp_2, int lp_3);
0x775 - void PortraitSetPosition(int lp_1, int lp_2, int lp_3, int lp_4);
0x776 - void PortraitSetFullscreen(int lp_1, bool lp_2);
0x777 - void PortraitSetOffscreen(int lp_1, bool lp_2);
0x778 - void PortraitSetVisible(int lp_1, playergroup lp_2, bool lp_3, bool lp_4);
0x779 - void PortraitSetBorderVisible(int lp_1, bool lp_2);
0x77A - void PortraitSetBorderTexture(int lp_1, string lp_2);
0x77B - void PortraitSetBackgroundVisible(int lp_1, bool lp_2);
0x77C - void PortraitSetChannel(int lp_1, int lp_2);
0x77D - void PortraitSetRenderType(int lp_1, int lp_2);
0x77E - void PortraitUseTransition(int lp_1, bool lp_2);
0x77F - void PortraitSetMuted(int lp_1, bool lp_2);
0x780 - void PortraitForceTransition(int lp_1, bool lp_2, bool lp_3);
0x781 - void PortraitSetPaused(int lp_1, bool lp_2);
0x782 - void PortraitSetTintColor(int lp_1, color lp_2);
0x783 - void PortraitSetTeamColor(int lp_1, color lp_2);
0x784 - void PortraitSetLight(int lp_1, string lp_2);
0x785 - void PortraitSetTransitionModel(int lp_1, string lp_2);
0x786 - void PortraitSetMouseTarget(int lp_1, bool lp_2);
0x787 - void PortraitSetActor(int lp_1, string lp_2);
0x788 - bool PortraitVisible(int lp_1, int lp_2);
0x789 - void PreloadAsset(string lp_1, bool lp_2);
0x78A - void PreloadImage(string lp_1, bool lp_2);
0x78B - void PreloadLayout(string lp_1, bool lp_2);
0x78C - void PreloadModel(string lp_1, bool lp_2);
0x78D - void PreloadMovie(string lp_1, bool lp_2);
0x78E - void PreloadObject(int lp_1, string lp_2, bool lp_3);
0x78F - void PreloadScene(string lp_1, bool lp_2);
0x790 - void PreloadScript(string lp_1, bool lp_2);
0x791 - void PreloadSound(string lp_1, bool lp_2);
0x792 - int PurchaseCategoryCreate(playergroup lp_1, int lp_2);
0x793 - int PurchaseCategoryLastCreated();
0x794 - void PurchaseCategoryDestroy(int lp_1);
0x795 - void PurchaseCategoryDestroyAll(playergroup lp_1);
0x796 - void PurchaseCategorySetPlayerGroup(int lp_1, playergroup lp_2);
0x797 - void PurchaseCategorySetNameText(int lp_1, text lp_2);
0x798 - void PurchaseCategorySetState(int lp_1, int lp_2);
0x799 - void PurchaseCategorySetSlot(int lp_1, int lp_2);
0x79A - void PurchaseSetSelectedPurchaseCategory(playergroup lp_1, int lp_2);
0x79B - int PurchaseGetSelectedPurchaseCategory(int lp_1);
0x79C - int PurchaseGroupCreate(playergroup lp_1, int lp_2, int lp_3);
0x79D - int PurchaseGroupLastCreated();
0x79E - void PurchaseGroupDestroy(int lp_1);
0x79F - void PurchaseGroupDestroyAll(playergroup lp_1);
0x7A0 - void PurchaseGroupSetPlayerGroup(int lp_1, playergroup lp_2);
0x7A1 - void PurchaseGroupSetNameText(int lp_1, text lp_2);
0x7A2 - void PurchaseGroupSetTooltipText(int lp_1, text lp_2);
0x7A3 - void PurchaseGroupSetIconFilePath(int lp_1, string lp_2);
0x7A4 - void PurchaseGroupSetState(int lp_1, int lp_2);
0x7A5 - void PurchaseGroupSetSlot(int lp_1, int lp_2);
0x7A6 - void PurchaseGroupSetUnitLink(int lp_1, string lp_2);
0x7A7 - int PurchaseItemCreate(playergroup lp_1, int lp_2, int lp_3);
0x7A8 - int PurchaseItemLastCreated();
0x7A9 - void PurchaseItemDestroy(int lp_1);
0x7AA - void PurchaseItemDestroyAll(playergroup lp_1);
0x7AB - void PurchaseItemSetPlayerGroup(int lp_1, playergroup lp_2);
0x7AC - void PurchaseItemSetNameText(int lp_1, text lp_2);
0x7AD - void PurchaseItemSetTooltipText(int lp_1, text lp_2);
0x7AE - void PurchaseItemSetDescriptionText(int lp_1, text lp_2);
0x7AF - void PurchaseItemSetIconFilePath(int lp_1, string lp_2);
0x7B0 - void PurchaseItemSetMovieFilePath(int lp_1, string lp_2);
0x7B1 - void PurchaseItemSetCost(int lp_1, int lp_2);
0x7B2 - void PurchaseItemSetState(int lp_1, int lp_2);
0x7B3 - void PurchaseItemSetRecentlyPurchased(int lp_1, bool lp_2);
0x7B4 - void PurchaseItemSetSlot(int lp_1, int lp_2);
0x7B5 - void PurchaseItemPurchase(int lp_1);
0x7B6 - bool PurchaseItemIsRecentlyPurchased(int lp_1);
0x7B7 - void PurchaseSetSelectedPurchaseItem(playergroup lp_1, int lp_2);
0x7B8 - int PurchaseGetSelectedPurchaseItem(int lp_1);
0x7B9 - void TriggerAddEventPurchaseMade(trigger lp_1, int lp_2, int lp_3);
0x7BA - void TriggerAddEventPurchaseExit(trigger lp_1, int lp_2);
0x7BB - void TriggerAddEventSelectedPurchaseItemChanged(trigger lp_1, int lp_2, int lp_3);
0x7BC - void TriggerAddEventSelectedPurchaseCategoryChanged(trigger lp_1, int lp_2, int lp_3);
0x7BD - int EventPurchaseMade();
0x7BE - region RegionEmpty();
0x7BF - region RegionEntireMap();
0x7C0 - region RegionPlayableMap();
0x7C1 - void RegionPlayableMapSet(region lp_1);
0x7C2 - region RegionRect(fixed lp_1, fixed lp_2, fixed lp_3, fixed lp_4);
0x7C3 - region RegionCircle(point lp_1, fixed lp_2);
0x7C4 - region RegionFromId(int lp_1);
0x7C5 - region RegionFromName(string lp_1);
0x7C6 - void RegionAddRect(region lp_1, bool lp_2, fixed lp_3, fixed lp_4, fixed lp_5, fixed lp_6);
0x7C7 - void RegionAddCircle(region lp_1, bool lp_2, point lp_3, fixed lp_4);
0x7C8 - void RegionAddRegion(region lp_1, region lp_2);
0x7C9 - void RegionSetOffset(region lp_1, point lp_2);
0x7CA - point RegionGetOffset(region lp_1);
0x7CB - bool RegionContainsPoint(region lp_1, point lp_2);
0x7CC - point RegionRandomPoint(region lp_1);
0x7CD - point RegionGetBoundsMin(region lp_1);
0x7CE - point RegionGetBoundsMax(region lp_1);
0x7CF - point RegionGetCenter(region lp_1);
0x7D0 - void RegionSetCenter(region lp_1, point lp_2);
0x7D1 - void RegionAttachToUnit(region lp_1, unit lp_2, point lp_3);
0x7D2 - unit RegionGetAttachUnit(region lp_1);
0x7D3 - int ResearchCategoryCreate(playergroup lp_1, int lp_2);
0x7D4 - int ResearchCategoryLastCreated();
0x7D5 - void ResearchCategoryDestroy(int lp_1);
0x7D6 - void ResearchCategoryDestroyAll(playergroup lp_1);
0x7D7 - void ResearchCategorySetPlayerGroup(int lp_1, playergroup lp_2);
0x7D8 - void ResearchCategorySetSlot(int lp_1, int lp_2);
0x7D9 - void ResearchCategorySetNameText(int lp_1, text lp_2);
0x7DA - void ResearchCategorySetCurrentLevel(int lp_1, int lp_2);
0x7DB - void ResearchCategorySetLastLevel(int lp_1, int lp_2);
0x7DC - int ResearchTierCreate(playergroup lp_1, int lp_2, int lp_3);
0x7DD - int ResearchTierLastCreated();
0x7DE - void ResearchTierDestroy(int lp_1);
0x7DF - void ResearchTierDestroyAll(playergroup lp_1);
0x7E0 - void ResearchTierSetPlayerGroup(int lp_1, playergroup lp_2);
0x7E1 - void ResearchTierSetSlot(int lp_1, int lp_2);
0x7E2 - void ResearchTierSetRequiredLevel(int lp_1, int lp_2);
0x7E3 - void ResearchTierSetMaxPurchasesAllowed(int lp_1, int lp_2);
0x7E4 - int ResearchItemCreate(playergroup lp_1, int lp_2, int lp_3);
0x7E5 - int ResearchItemLastCreated();
0x7E6 - void ResearchItemDestroy(int lp_1);
0x7E7 - void ResearchItemDestroyAll(playergroup lp_1);
0x7E8 - void ResearchItemSetPlayerGroup(int lp_1, playergroup lp_2);
0x7E9 - void ResearchItemSetSlot(int lp_1, int lp_2);
0x7EA - void ResearchItemSetState(int lp_1, int lp_2);
0x7EB - void ResearchItemSetNameText(int lp_1, text lp_2);
0x7EC - void ResearchItemSetDescriptionText(int lp_1, text lp_2);
0x7ED - void ResearchItemSetTooltipText(int lp_1, text lp_2);
0x7EE - void ResearchItemSetConfirmationText(int lp_1, text lp_2);
0x7EF - void ResearchItemSetIconFilePath(int lp_1, string lp_2);
0x7F0 - void ResearchItemSetMovieFilePath(int lp_1, string lp_2);
0x7F1 - void ResearchItemSetRecentlyPurchased(int lp_1, bool lp_2);
0x7F2 - bool ResearchItemIsRecentlyPurchased(int lp_1);
0x7F3 - void ResearchItemPurchase(int lp_1);
0x7F4 - void ResearchItemSetSelected(playergroup lp_1, int lp_2);
0x7F5 - int ResearchItemGetSelected(int lp_1);
0x7F6 - void TriggerAddEventResearchPanelExit(trigger lp_1, int lp_2);
0x7F7 - void TriggerAddEventResearchPanelPurchase(trigger lp_1, int lp_2);
0x7F8 - void TriggerAddEventResearchPanelSelectionChanged(trigger lp_1, int lp_2, int lp_3);
0x7F9 - soundlink SoundLink(string lp_1, int lp_2);
0x7FA - string SoundLinkId(soundlink lp_1);
0x7FB - int SoundLinkAsset(soundlink lp_1);
0x7FC - void SoundPlayForPlayer(soundlink lp_1, int lp_2, playergroup lp_3, fixed lp_4, fixed lp_5);
0x7FD - void SoundPlayAtPointForPlayer(soundlink lp_1, int lp_2, playergroup lp_3, point lp_4, fixed lp_5, fixed lp_6, fixed lp_7);
0x7FE - void SoundPlayOnUnitForPlayer(soundlink lp_1, int lp_2, playergroup lp_3, unit lp_4, fixed lp_5, fixed lp_6, fixed lp_7);
0x7FF - void SoundPlaySceneForPlayer(soundlink lp_1, int lp_2, playergroup lp_3, unitgroup lp_4, string lp_5);
0x800 - sound SoundLastPlayed();
0x801 - void SoundPause(sound lp_1, bool lp_2);
0x802 - void SoundStop(sound lp_1, bool lp_2);
0x803 - void SoundStopAllModelSounds();
0x804 - void SoundStopAllTriggerSounds(bool lp_1);
0x805 - void SoundSetVolume(sound lp_1, fixed lp_2);
0x806 - void SoundSetPosition(sound lp_1, point lp_2, fixed lp_3);
0x807 - void SoundSetOffset(sound lp_1, fixed lp_2, int lp_3);
0x808 - void SoundWait(sound lp_1, fixed lp_2, int lp_3);
0x809 - void SoundAttachUnit(sound lp_1, unit lp_2, fixed lp_3);
0x80A - void SoundLengthQuery(soundlink lp_1);
0x80B - void SoundLengthQueryWait();
0x80C - fixed SoundLengthSync(soundlink lp_1);
0x80D - void SoundChannelSetVolume(playergroup lp_1, int lp_2, fixed lp_3, fixed lp_4);
0x80E - void SoundChannelMute(playergroup lp_1, int lp_2, bool lp_3);
0x80F - void SoundChannelPause(playergroup lp_1, int lp_2, bool lp_3);
0x810 - void SoundChannelStop(playergroup lp_1, int lp_2);
0x811 - void SoundChannelDSPInsert(playergroup lp_1, int lp_2, string lp_3);
0x812 - void SoundChannelDSPRemove(playergroup lp_1, int lp_2, string lp_3);
0x813 - void SoundSetReverb(string lp_1, fixed lp_2, bool lp_3, bool lp_4);
0x814 - void SoundSetReverbForPlayers(playergroup lp_1, string lp_2, fixed lp_3, bool lp_4, bool lp_5);
0x815 - void SoundSetFactors(fixed lp_1, fixed lp_2, fixed lp_3);
0x816 - text SoundSubtitleText(soundlink lp_1);
0x817 - string SoundPortraitModel(soundlink lp_1);
0x818 - void SoundSetListenerGender(soundlink lp_1, int lp_2);
0x819 - void SoundPlaySceneFile(soundlink lp_1, playergroup lp_2, string lp_3, string lp_4);
0x81A - void SoundtrackDefault(playergroup lp_1, int lp_2, string lp_3, int lp_4, int lp_5);
0x81B - void SoundtrackPlay(playergroup lp_1, int lp_2, string lp_3, int lp_4, int lp_5, bool lp_6);
0x81C - void SoundtrackPause(playergroup lp_1, int lp_2, bool lp_3, bool lp_4);
0x81D - void SoundtrackSetContinuous(playergroup lp_1, int lp_2, bool lp_3);
0x81E - void SoundtrackSetDelay(playergroup lp_1, int lp_2, fixed lp_3);
0x81F - void SoundtrackSetShuffle(playergroup lp_1, int lp_2, bool lp_3, bool lp_4);
0x820 - void SoundtrackStop(playergroup lp_1, int lp_2, bool lp_3);
0x821 - void SoundtrackStopCurrent(playergroup lp_1, int lp_2, bool lp_3);
0x822 - void SoundtrackWait(string lp_1);
0x823 - int StatEventCreate(string lp_1);
0x824 - void StatEventAddDataString(int lp_1, string lp_2, string lp_3);
0x825 - void StatEventAddDataInt(int lp_1, string lp_2, int lp_3);
0x826 - void StatEventAddDataFixed(int lp_1, string lp_2, fixed lp_3);
0x827 - void StatEventSend(int lp_1);
0x828 - int StatEventLastCreated();
0x829 - void StoryMode(playergroup lp_1, bool lp_2);
0x82A - void StoryCreatePlanetPanel();
0x82B - void StorySetChange();
0x82C - void CampaignMode(playergroup lp_1, bool lp_2);
0x82D - int StringLength(string lp_1);
0x82E - string StringCase(string lp_1, bool lp_2);
0x82F - text TextCase(text lp_1, bool lp_2);
0x830 - string StringSub(string lp_1, int lp_2, int lp_3);
0x831 - bool StringEqual(string lp_1, string lp_2, bool lp_3);
0x832 - int StringCompare(string lp_1, string lp_2, bool lp_3);
0x833 - int StringFind(string lp_1, string lp_2, bool lp_3);
0x834 - bool StringContains(string lp_1, string lp_2, int lp_3, bool lp_4);
0x835 - string StringWord(string lp_1, int lp_2);
0x836 - string StringReplace(string lp_1, string lp_2, int lp_3, int lp_4);
0x837 - string StringReplaceWord(string lp_1, string lp_2, string lp_3, int lp_4, bool lp_5);
0x838 - text TextReplaceWord(text lp_1, text lp_2, text lp_3, int lp_4, bool lp_5);
0x839 - text StringExternal(string lp_1);
0x83A - text StringExternalHotkey(string lp_1);
0x83B - text StringExternalAsset(string lp_1);
0x83C - text StringToText(string lp_1);
0x83D - string TextToString(text lp_1);
0x83E - void TextExpressionSetToken(string lp_1, string lp_2, text lp_3);
0x83F - text TextExpressionAssemble(string lp_1);
0x840 - text TextWithColor(text lp_1, color lp_2);
0x841 - text TextTimeFormat(text lp_1, int lp_2);
0x842 - void TechTreeAbilityAllow(int lp_1, abilcmd lp_2, bool lp_3);
0x843 - int TechTreeAbilityCount(int lp_1, string lp_2, int lp_3);
0x844 - bool TechTreeAbilityIsAllowed(int lp_1, abilcmd lp_2);
0x845 - void TechTreeBehaviorAllow(int lp_1, string lp_2, bool lp_3);
0x846 - int TechTreeBehaviorCount(int lp_1, string lp_2, int lp_3);
0x847 - bool TechTreeBehaviorIsAllowed(int lp_1, string lp_2);
0x848 - abilcmd TechTreeBehaviorProducedAbilCmd(string lp_1, int lp_2);
0x849 - int TechTreeBehaviorProducedAbilCmdCount(string lp_1);
0x84A - void TechTreeRequirementsEnable(int lp_1, bool lp_2);
0x84B - bool TechTreeRequirementsEnabled(int lp_1);
0x84C - void TechTreeSpecificRequirementEnable(int lp_1, string lp_2, bool lp_3);
0x84D - bool TechTreeSpecificRequirementEnabled(int lp_1, string lp_2);
0x84E - void TechTreeRestrictionsEnable(int lp_1, bool lp_2);
0x84F - bool TechTreeRestrictionsEnabled(int lp_1);
0x850 - void TechTreeUnitAllow(int lp_1, string lp_2, bool lp_3);
0x851 - int TechTreeUnitCount(int lp_1, string lp_2, int lp_3);
0x852 - int TechTreeUnitAliasCount(int lp_1, string lp_2, int lp_3);
0x853 - int TechTreeUnitCountEx(int lp_1, string lp_2, string lp_3, int lp_4);
0x854 - bool TechTreeUnitIsAllowed(int lp_1, string lp_2);
0x855 - void TechTreeUnitHelp(int lp_1, string lp_2, bool lp_3);
0x856 - void TechTreeUnitHelpDefault(int lp_1, bool lp_2);
0x857 - abilcmd TechTreeUnitProducedAbilCmd(string lp_1, int lp_2);
0x858 - int TechTreeUnitProducedAbilCmdCount(string lp_1);
0x859 - string TechTreeUnitProducesUnit(string lp_1, int lp_2);
0x85A - int TechTreeUnitProducesUnitCount(string lp_1);
0x85B - string TechTreeUnitProducesUpgrade(string lp_1, int lp_2);
0x85C - int TechTreeUnitProducesUpgradeCount(string lp_1);
0x85D - void TechTreeUpgradeAddLevel(int lp_1, string lp_2, int lp_3);
0x85E - void TechTreeUpgradeAllow(int lp_1, string lp_2, bool lp_3);
0x85F - int TechTreeUpgradeCount(int lp_1, string lp_2, int lp_3);
0x860 - bool TechTreeUpgradeIsAllowed(int lp_1, string lp_2);
0x861 - abilcmd TechTreeUpgradeProducedAbilCmd(string lp_1, int lp_2);
0x862 - int TechTreeUpgradeProducedAbilCmdCount(string lp_1);
0x863 - void TechTreeSetProduceCap(int lp_1, string lp_2, int lp_3, int lp_4);
0x864 - int TechTreeGetProduceCap(int lp_1, string lp_2, int lp_3);
0x865 - int TextTagCreate(text lp_1, int lp_2, point lp_3, fixed lp_4, bool lp_5, bool lp_6, playergroup lp_7);
0x866 - int TextTagLastCreated();
0x867 - void TextTagDestroy(int lp_1);
0x868 - void TextTagSetText(int lp_1, text lp_2);
0x869 - void TextTagSetTextShadow(int lp_1, bool lp_2);
0x86A - void TextTagSetFontSize(int lp_1, int lp_2);
0x86B - void TextTagSetPosition(int lp_1, point lp_2, fixed lp_3);
0x86C - void TextTagAttachToUnit(int lp_1, unit lp_2, fixed lp_3);
0x86D - void TextTagAttachToUnitPoint(int lp_1, unit lp_2, string lp_3, int lp_4, int lp_5);
0x86E - void TextTagSetVelocity(int lp_1, fixed lp_2, fixed lp_3);
0x86F - void TextTagSetGravity(int lp_1, fixed lp_2);
0x870 - void TextTagSetAlignment(int lp_1, int lp_2, int lp_3);
0x871 - void TextTagSetTextAlignment(int lp_1, int lp_2, int lp_3);
0x872 - void TextTagSetMaxSize(int lp_1, fixed lp_2, fixed lp_3);
0x873 - void TextTagShowBackground(int lp_1, bool lp_2);
0x874 - void TextTagSetBackgroundImage(int lp_1, string lp_2, bool lp_3);
0x875 - void TextTagSetBackgroundBorderSize(int lp_1, fixed lp_2, fixed lp_3);
0x876 - void TextTagSetBackgroundOffset(int lp_1, fixed lp_2, fixed lp_3);
0x877 - void TextTagSetEdgeImage(int lp_1, int lp_2, string lp_3, int lp_4, int lp_5);
0x878 - void TextTagShow(int lp_1, playergroup lp_2, bool lp_3);
0x879 - bool TextTagVisible(int lp_1, int lp_2);
0x87A - void TextTagPause(int lp_1, bool lp_2);
0x87B - void TextTagFogofWar(int lp_1, bool lp_2);
0x87C - void TextTagSetFogVisibility(int lp_1, int lp_2);
0x87D - void TextTagSetColor(int lp_1, int lp_2, color lp_3);
0x87E - void TextTagSetFadedTransparency(int lp_1, int lp_2, fixed lp_3);
0x87F - void TextTagSetTime(int lp_1, int lp_2, fixed lp_3);
0x880 - void Wait(fixed lp_1, int lp_2);
0x881 - void AITimePause(bool lp_1);
0x882 - bool AITimeIsPaused();
0x883 - timer TimerCreate();
0x884 - void TimerStart(timer lp_1, fixed lp_2, bool lp_3, int lp_4);
0x885 - void TimerRestart(timer lp_1);
0x886 - timer TimerLastStarted();
0x887 - void TimerPause(timer lp_1, bool lp_2);
0x888 - bool TimerIsPaused(timer lp_1);
0x889 - fixed TimerGetElapsed(timer lp_1);
0x88A - fixed TimerGetRemaining(timer lp_1);
0x88B - fixed TimerGetDuration(timer lp_1);
0x88C - void SetScoreTimer(timer lp_1);
0x88D - void TriggerAddEventTimer(trigger lp_1, timer lp_2);
0x88E - void TriggerAddEventTimeElapsed(trigger lp_1, fixed lp_2, int lp_3);
0x88F - void TriggerAddEventTimePeriodic(trigger lp_1, fixed lp_2, int lp_3);
0x890 - timer EventTimer();
0x891 - int TimerWindowCreate(timer lp_1, text lp_2, bool lp_3, bool lp_4);
0x892 - int TimerWindowLastCreated();
0x893 - void TimerWindowDestroy(int lp_1);
0x894 - void TimerWindowSetAnchor(int lp_1, int lp_2, int lp_3, int lp_4);
0x895 - void TimerWindowSetPosition(int lp_1, int lp_2, int lp_3);
0x896 - void TimerWindowResetPosition(int lp_1);
0x897 - void TimerWindowShow(int lp_1, playergroup lp_2, bool lp_3);
0x898 - bool TimerWindowVisible(int lp_1, int lp_2);
0x899 - void TimerWindowSetTimer(int lp_1, timer lp_2);
0x89A - void TimerWindowSetTitle(int lp_1, text lp_2);
0x89B - void TimerWindowSetStyle(int lp_1, int lp_2, bool lp_3);
0x89C - void TimerWindowSetGapWidth(int lp_1, int lp_2);
0x89D - void TimerWindowSetFixedHeight(int lp_1, int lp_2);
0x89E - void TimerWindowSetFormat(int lp_1, text lp_2);
0x89F - void TimerWindowSetColor(int lp_1, int lp_2, color lp_3, fixed lp_4);
0x8A0 - void TimerWindowShowBorder(int lp_1, bool lp_2);
0x8A1 - void TimerWindowShowProgressBar(int lp_1, bool lp_2);
0x8A2 - void TimerWindowSetProgressColor(int lp_1, color lp_2, int lp_3);
0x8A3 - void TimerWindowSetImageType(int lp_1, int lp_2, int lp_3);
0x8A4 - transmissionsource TransmissionSource();
0x8A5 - transmissionsource TransmissionSourceFromUnit(unit lp_1, bool lp_2, bool lp_3, string lp_4);
0x8A6 - transmissionsource TransmissionSourceFromUnitType(string lp_1, bool lp_2);
0x8A7 - transmissionsource TransmissionSourceFromModel(string lp_1);
0x8A8 - transmissionsource TransmissionSourceFromMovie(string lp_1, bool lp_2);
0x8A9 - void TransmissionSourceSetPauseAllowed(transmissionsource lp_1, bool lp_2);
0x8AA - void TransmissionSourceSetStreamingAllowed(transmissionsource lp_1, bool lp_2);
0x8AB - void TransmissionSourceSetBypassMessageLog(transmissionsource lp_1, bool lp_2);
0x8AC - int TransmissionSendForPlayerSelect(playergroup lp_1, transmissionsource lp_2, int lp_3, string lp_4, string lp_5, soundlink lp_6, text lp_7, text lp_8, fixed lp_9, int lp_10, bool lp_11, int lp_12, bool lp_13);
0x8AD - int TransmissionSendForPlayer(playergroup lp_1, transmissionsource lp_2, int lp_3, string lp_4, string lp_5, soundlink lp_6, text lp_7, text lp_8, fixed lp_9, int lp_10, bool lp_11, int lp_12);
0x8AE - int TransmissionLastSent();
0x8AF - void TransmissionClear(int lp_1);
0x8B0 - bool TransmissionPlayerHasActiveTransmission(int lp_1);
0x8B1 - void TransmissionClearAll();
0x8B2 - void TransmissionClearGroup(playergroup lp_1);
0x8B3 - void TransmissionSetOption(int lp_1, bool lp_2);
0x8B4 - void TransmissionWait(int lp_1, fixed lp_2);
0x8B5 - bool TransmissionIsComplete(int lp_1);
0x8B6 - trigger TriggerCreate(string lp_1);
0x8B7 - trigger TriggerFind(string lp_1);
0x8B8 - void TriggerDestroy(trigger lp_1);
0x8B9 - void TriggerEnable(trigger lp_1, bool lp_2);
0x8BA - bool TriggerIsEnabled(trigger lp_1);
0x8BB - void TriggerResetCounts(trigger lp_1);
0x8BC - int TriggerGetEvalCount(trigger lp_1);
0x8BD - int TriggerGetExecCount(trigger lp_1);
0x8BE - string TriggerGetFunction(trigger lp_1);
0x8BF - bool TriggerEvaluate(trigger lp_1);
0x8C0 - void TriggerExecute(trigger lp_1, bool lp_2, bool lp_3);
0x8C1 - trigger TriggerGetCurrent();
0x8C2 - int TriggerActiveCount(trigger lp_1);
0x8C3 - void TriggerStop(trigger lp_1);
0x8C4 - void TriggerWaitForTrigger(trigger lp_1, bool lp_2);
0x8C5 - void TriggerCurrentTriggerThreadSetFlags(int lp_1, bool lp_2);
0x8C6 - void TriggerQueueEnter();
0x8C7 - void TriggerQueueExit();
0x8C8 - bool TriggerQueueIsEmpty();
0x8C9 - void TriggerQueuePause(bool lp_1);
0x8CA - void TriggerQueueClear(int lp_1);
0x8CB - void TriggerSkippableBegin(playergroup lp_1, int lp_2, trigger lp_3, bool lp_4, bool lp_5);
0x8CC - void TriggerSkippableEnd();
0x8CD - void TriggerAddEventTriggerSkipped(trigger lp_1, int lp_2, trigger lp_3);
0x8CE - trigger EventTrigger();
0x8CF - int EventType();
0x8D0 - string EventTypeName();
0x8D1 - text EventTypeDescription();
0x8D2 - string TriggerEventParamName(string lp_1, string lp_2);
0x8D3 - void TriggerSendEvent(string lp_1);
0x8D4 - void TriggerAddEventGeneric(trigger lp_1, string lp_2);
0x8D5 - string EventGenericName();
0x8D6 - void TriggerDebugWindowOpen(bool lp_1);
0x8D7 - void TriggerDebugOutput(int lp_1, text lp_2, bool lp_3);
0x8D8 - void TriggerDebugOutputEnable(bool lp_1);
0x8D9 - void TriggerDebugEnableType(int lp_1, bool lp_2);
0x8DA - void TriggerDebugSetTypeName(int lp_1, text lp_2);
0x8DB - void TriggerDebugSetTypeColor(int lp_1, color lp_2);
0x8DC - void TriggerDebugSetTypeFile(int lp_1, string lp_2);
0x8DD - void TriggerDebugSetTypeFilter(int lp_1, int lp_2, bool lp_3);
0x8DE - unitgroup UnitCreate(int lp_1, string lp_2, int lp_3, int lp_4, point lp_5, fixed lp_6);
0x8DF - unit UnitLastCreated();
0x8E0 - unitgroup UnitLastCreatedGroup();
0x8E1 - unit UnitFromId(int lp_1);
0x8E2 - void UnitLoadModel(unit lp_1);
0x8E3 - void UnitUnloadModel(unit lp_1);
0x8E4 - void UnitRemove(unit lp_1);
0x8E5 - void UnitKill(unit lp_1);
0x8E6 - void UnitRevive(unit lp_1);
0x8E7 - bool UnitIsAlive(unit lp_1);
0x8E8 - bool UnitIsValid(unit lp_1);
0x8E9 - void UnitWaitUntilIdle(unit lp_1, bool lp_2);
0x8EA - unit UnitGetOriginalCaster(unit lp_1);
0x8EB - string UnitGetOriginalEffect(unit lp_1);
0x8EC - unit UnitGetMagazine(unit lp_1);
0x8ED - text UnitGetName(unit lp_1);
0x8EE - int UnitGetTag(unit lp_1);
0x8EF - int UnitGetSeed(unit lp_1);
0x8F0 - void UnitSetSeed(unit lp_1, int lp_2);
0x8F1 - void UnitResetSeed(unit lp_1);
0x8F2 - string UnitGetType(unit lp_1);
0x8F3 - void UnitShowKillDisplay(unit lp_1, int lp_2);
0x8F4 - int UnitGetOwner(unit lp_1);
0x8F5 - void UnitSetOwner(unit lp_1, int lp_2, bool lp_3);
0x8F6 - void UnitSetTeamColorIndex(unit lp_1, int lp_2);
0x8F7 - void UnitResetTeamColorIndex(unit lp_1);
0x8F8 - point UnitGetPosition(unit lp_1);
0x8F9 - point UnitGetGoalPosition(unit lp_1);
0x8FA - void UnitSetPosition(unit lp_1, point lp_2, bool lp_3);
0x8FB - fixed UnitGetHeight(unit lp_1);
0x8FC - void UnitSetHeight(unit lp_1, fixed lp_2, fixed lp_3);
0x8FD - fixed UnitGetFacing(unit lp_1);
0x8FE - void UnitSetFacing(unit lp_1, fixed lp_2, fixed lp_3);
0x8FF - point UnitGetAttachmentPoint(unit lp_1, string lp_2);
0x900 - void UnitResetSpeed(unit lp_1);
0x901 - void UnitSetScale(unit lp_1, fixed lp_2, fixed lp_3, fixed lp_4);
0x902 - void UnitPauseAll(bool lp_1);
0x903 - void UnitPutInTransport(unit lp_1, unit lp_2);
0x904 - unitgroup UnitGetTrackedUnitGroup(unit lp_1, string lp_2);
0x905 - void UnitSetCursor(unit lp_1, string lp_2);
0x906 - void UnitSetPingCursor(unit lp_1, string lp_2);
0x907 - void UnitSetInfoText(unit lp_1, text lp_2, text lp_3, text lp_4);
0x908 - void UnitSetInfoText2(unit lp_1, text lp_2);
0x909 - void UnitSetInfoButtonTooltip(unit lp_1, string lp_2, text lp_3);
0x90A - void UnitClearInfoButtonTooltip(unit lp_1, string lp_2);
0x90B - void UnitSetInfoTip(unit lp_1, text lp_2);
0x90C - void UnitSetInfoSubTip(unit lp_1, text lp_2);
0x90D - void UnitClearInfoText(unit lp_1);
0x90E - void UnitForceStatusBar(unit lp_1, bool lp_2);
0x90F - void UnitStatusBarOverride(unit lp_1, int lp_2);
0x910 - void UnitStatusBarClearOverride(unit lp_1);
0x911 - void UnitSetState(unit lp_1, int lp_2, bool lp_3);
0x912 - bool UnitTestState(unit lp_1, int lp_2);
0x913 - void UnitSetPropertyInt(unit lp_1, int lp_2, int lp_3);
0x914 - void UnitSetPropertyFixed(unit lp_1, int lp_2, fixed lp_3);
0x915 - int UnitGetPropertyInt(unit lp_1, int lp_2, bool lp_3);
0x916 - fixed UnitGetPropertyFixed(unit lp_1, int lp_2, bool lp_3);
0x917 - void UnitSetCustomValue(unit lp_1, int lp_2, fixed lp_3);
0x918 - fixed UnitGetCustomValue(unit lp_1, int lp_2);
0x919 - void UnitAddChargeRegen(unit lp_1, string lp_2, fixed lp_3);
0x91A - void ItemSetChargeCount(unit lp_1, fixed lp_2);
0x91B - fixed ItemGetChargeCount(unit lp_1, bool lp_2);
0x91C - void UnitAddChargeRegenRemaining(unit lp_1, string lp_2, fixed lp_3);
0x91D - fixed UnitGetChargeRegen(unit lp_1, string lp_2);
0x91E - void UnitAddChargeRegenFull(unit lp_1, string lp_2, fixed lp_3);
0x91F - fixed UnitGetChargeRegenFull(unit lp_1, string lp_2, bool lp_3);
0x920 - void UnitAddChargeUsed(unit lp_1, string lp_2, fixed lp_3);
0x921 - fixed UnitGetChargeUsed(unit lp_1, string lp_2);
0x922 - void UnitModifyCooldown(unit lp_1, string lp_2, fixed lp_3, int lp_4);
0x923 - void UnitClearCooldowns(unit lp_1, bool lp_2);
0x924 - fixed UnitGetCooldown(unit lp_1, string lp_2);
0x925 - void UnitAddCooldown(unit lp_1, string lp_2, fixed lp_3);
0x926 - void UnitCreateEffectPoint(unit lp_1, string lp_2, point lp_3);
0x927 - void UnitCreateEffectUnit(unit lp_1, string lp_2, unit lp_3);
0x928 - int UnitValidateEffectPoint(unit lp_1, string lp_2, point lp_3);
0x929 - int UnitValidateEffectUnit(unit lp_1, string lp_2, unit lp_3);
0x92A - void UnitDamage(unit lp_1, string lp_2, unit lp_3, fixed lp_4);
0x92B - effecthistory UnitEffectHistory(unit lp_1, int lp_2);
0x92C - void UnitSetAIOption(unit lp_1, int lp_2, bool lp_3);
0x92D - bool UnitGetAIOption(unit lp_1, int lp_2);
0x92E - bool UnitAbilityAdd(unit lp_1, string lp_2);
0x92F - bool UnitAbilityRemove(unit lp_1, string lp_2);
0x930 - bool UnitAbilityChangeCardId(unit lp_1, string lp_2, string lp_3);
0x931 - string UnitAbilityGetCardId(unit lp_1, string lp_2);
0x932 - void UnitAbilitySpend(unit lp_1, abilcmd lp_2, int lp_3);
0x933 - void UnitAbilitySpendExplicit(unit lp_1, abilcmd lp_2, int lp_3, fixed lp_4, fixed lp_5, fixed lp_6, fixed lp_7);
0x934 - void UnitAbilityReset(unit lp_1, abilcmd lp_2, int lp_3);
0x935 - fixed UnitAbilityChargeInfo(unit lp_1, abilcmd lp_2, int lp_3);
0x936 - int UnitAbilityCount(unit lp_1);
0x937 - bool UnitAbilityExists(unit lp_1, string lp_2);
0x938 - void UnitAbilityEnable(unit lp_1, string lp_2, bool lp_3);
0x939 - void UnitAbilityShow(unit lp_1, string lp_2, bool lp_3);
0x93A - string UnitAbilityGet(unit lp_1, int lp_2);
0x93B - bool UnitAbilityCheck(unit lp_1, string lp_2, bool lp_3);
0x93C - bool UnitCheckAbilCmdState(unit lp_1, abilcmd lp_2, int lp_3);
0x93D - int UnitAbilOrderStateFlags(unit lp_1, order lp_2);
0x93E - bool UnitAbilityChangeLink(unit lp_1, string lp_2, string lp_3);
0x93F - void UnitAbilityChangeLevel(unit lp_1, string lp_2, int lp_3);
0x940 - int UnitAbilityGetLevel(unit lp_1, string lp_2);
0x941 - int UnitAbilityMaxLevel(unit lp_1, string lp_2);
0x942 - void UnitAbilityAddChargeRegen(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x943 - void UnitAbilityAddChargeRegenRemaining(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x944 - fixed UnitAbilityGetChargeRegen(unit lp_1, string lp_2, string lp_3);
0x945 - void UnitAbilityAddChargeRegenFull(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x946 - fixed UnitAbilityGetChargeRegenFull(unit lp_1, string lp_2, string lp_3, bool lp_4);
0x947 - void UnitAbilityAddChargeUsed(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x948 - fixed UnitAbilityGetChargeUsed(unit lp_1, string lp_2, string lp_3);
0x949 - void UnitAbilityAddCooldown(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x94A - fixed UnitAbilityGetCooldown(unit lp_1, string lp_2, string lp_3);
0x94B - fixed UnitAbilityEffectInstantGetRange(unit lp_1, string lp_2);
0x94C - unit UnitAddOnChild(unit lp_1, int lp_2);
0x94D - unit UnitAddOnParent(unit lp_1);
0x94E - void UnitCargoCreate(unit lp_1, string lp_2, int lp_3);
0x94F - unit UnitCargoLastCreated();
0x950 - unitgroup UnitCargoLastCreatedGroup();
0x951 - unit UnitCargo(unit lp_1, int lp_2);
0x952 - unitgroup UnitCargoGroup(unit lp_1);
0x953 - int UnitCargoValue(unit lp_1, int lp_2);
0x954 - unit UnitTransport(unit lp_1);
0x955 - unitgroup UnitConjoinedGroup(unit lp_1, string lp_2);
0x956 - unit UnitAgent(unit lp_1, int lp_2);
0x957 - void UnitMagazineArm(unit lp_1, abilcmd lp_2, int lp_3);
0x958 - void UnitMagazineAssign(unit lp_1, abilcmd lp_2, unit lp_3, int lp_4);
0x959 - void UnitMagazineRemove(unit lp_1, abilcmd lp_2, unit lp_3);
0x95A - unit UnitMagazineLastCreated();
0x95B - unitgroup UnitMagazineLastCreatedGroup();
0x95C - int UnitMagazineCount(unit lp_1, string lp_2);
0x95D - int UnitQueueItemCount(unit lp_1, int lp_2);
0x95E - string UnitQueueItemGet(unit lp_1, int lp_2, int lp_3);
0x95F - fixed UnitQueueItemTime(unit lp_1, int lp_2, int lp_3);
0x960 - bool UnitQueueItemTypeCheck(unit lp_1, int lp_2, int lp_3);
0x961 - int UnitQueueGetProperty(unit lp_1, int lp_2);
0x962 - bool UnitMoverExists(unit lp_1, string lp_2);
0x963 - bool UnitTestPlane(unit lp_1, int lp_2);
0x964 - fixed UnitGetDamageDealtTime(unit lp_1);
0x965 - fixed UnitGetDamageTakenTime(unit lp_1);
0x966 - fixed UnitOrderGetProgress(unit lp_1);
0x967 - fixed UnitGetProgressComplete(unit lp_1, int lp_2);
0x968 - void UnitSetProgressComplete(unit lp_1, int lp_2, int lp_3);
0x969 - void UnitSetProgressStage(unit lp_1, int lp_2, int lp_3);
0x96A - bool UnitCheckProgressState(unit lp_1, int lp_2, int lp_3);
0x96B - void UnitBehaviorAdd(unit lp_1, string lp_2, unit lp_3, int lp_4);
0x96C - void UnitBehaviorAddPlayer(unit lp_1, string lp_2, int lp_3, int lp_4);
0x96D - void UnitSetAttributePoint(unit lp_1, string lp_2, bool lp_3, int lp_4);
0x96E - int UnitGetAttributePoint(unit lp_1, string lp_2, bool lp_3);
0x96F - int UnitBehaviorCountAll(unit lp_1);
0x970 - int UnitBehaviorCount(unit lp_1, string lp_2);
0x971 - bool UnitBehaviorEffectTreeUserDataExists(unit lp_1, string lp_2, string lp_3);
0x972 - fixed UnitBehaviorEffectTreeUserData(unit lp_1, string lp_2, string lp_3);
0x973 - void UnitBehaviorEffectTreeSetUserData(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x974 - fixed UnitBehaviorDuration(unit lp_1, string lp_2);
0x975 - fixed UnitBehaviorDurationTotal(unit lp_1, string lp_2);
0x976 - void UnitBehaviorSetDuration(unit lp_1, string lp_2, fixed lp_3);
0x977 - void UnitBehaviorSetDurationRemaining(unit lp_1, string lp_2, fixed lp_3);
0x978 - bool UnitBehaviorEnabled(unit lp_1, string lp_2);
0x979 - string UnitBehaviorGet(unit lp_1, int lp_2);
0x97A - bool UnitHasBehavior(unit lp_1, string lp_2);
0x97B - bool UnitHasBehavior2(unit lp_1, string lp_2);
0x97C - void UnitBehaviorRemove(unit lp_1, string lp_2, int lp_3);
0x97D - void UnitBehaviorRemovePlayer(unit lp_1, string lp_2, int lp_3, int lp_4);
0x97E - void UnitBehaviorTransfer(unit lp_1, unit lp_2, string lp_3, int lp_4);
0x97F - bool UnitBehaviorHasFlag(string lp_1, int lp_2);
0x980 - void UnitBehaviorRemoveCategory(unit lp_1, int lp_2);
0x981 - int UnitBehaviorEffectPlayer(unit lp_1, string lp_2, int lp_3, int lp_4);
0x982 - unit UnitBehaviorEffectUnit(unit lp_1, string lp_2, int lp_3, int lp_4);
0x983 - void UnitBehaviorAddChargeRegen(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x984 - void UnitBehaviorAddChargeRegenRemaining(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x985 - fixed UnitBehaviorGetChargeRegen(unit lp_1, string lp_2, string lp_3);
0x986 - void UnitBehaviorAddChargeRegenFull(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x987 - fixed UnitBehaviorGetChargeRegenFull(unit lp_1, string lp_2, string lp_3, bool lp_4);
0x988 - void UnitBehaviorAddChargeUsed(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x989 - fixed UnitBehaviorGetChargeUsed(unit lp_1, string lp_2, string lp_3);
0x98A - void UnitBehaviorAddCooldown(unit lp_1, string lp_2, string lp_3, fixed lp_4);
0x98B - fixed UnitBehaviorGetCooldown(unit lp_1, string lp_2, string lp_3);
0x98C - void UnitBehaviorSpawn(unit lp_1, string lp_2, int lp_3);
0x98D - fixed UnitBehaviorDamageModifyRemaining(unit lp_1, string lp_2);
0x98E - fixed UnitBehaviorDamageModifyLimit(unit lp_1, string lp_2);
0x98F - bool BehaviorAddToSharedTrackedUnitList(string lp_1, unit lp_2);
0x990 - void UnitXPGainEnable(unit lp_1, string lp_2, bool lp_3);
0x991 - marker UnitMarker(unit lp_1, int lp_2);
0x992 - void UnitMarkerAdd(unit lp_1, marker lp_2);
0x993 - int UnitMarkerCount(unit lp_1, marker lp_2);
0x994 - void UnitMarkerRemove(unit lp_1, marker lp_2);
0x995 - order UnitOrder(unit lp_1, int lp_2);
0x996 - int UnitOrderCount(unit lp_1);
0x997 - bool UnitOrderHasAbil(unit lp_1, string lp_2);
0x998 - bool UnitOrderIsAcquired(unit lp_1, int lp_2);
0x999 - bool UnitOrderIsValid(unit lp_1, order lp_2);
0x99A - bool UnitIsHarvesting(unit lp_1, int lp_2);
0x99B - bool UnitIssueOrder(unit lp_1, order lp_2, int lp_3);
0x99C - int UnitRallyPoint(unit lp_1, unit lp_2);
0x99D - int UnitRallyPointCount(unit lp_1);
0x99E - int UnitRallyPointTargetCount(unit lp_1, int lp_2);
0x99F - point UnitRallyPointTargetPoint(unit lp_1, int lp_2, int lp_3);
0x9A0 - unit UnitRallyPointTargetUnit(unit lp_1, int lp_2, int lp_3);
0x9A1 - int UnitTechTreeBehaviorCount(unit lp_1, string lp_2, int lp_3);
0x9A2 - int UnitTechTreeUnitCount(unit lp_1, string lp_2, int lp_3);
0x9A3 - int UnitTechTreeUpgradeCount(unit lp_1, string lp_2, int lp_3);
0x9A4 - void UnitLearnAbilResetLevel(unit lp_1, string lp_2, int lp_3);
0x9A5 - void UnitLearnAbilAddLevel(unit lp_1, string lp_2, int lp_3, int lp_4);
0x9A6 - int UnitLearnAbilGetLevel(unit lp_1, string lp_2, int lp_3);
0x9A7 - void UnitLearnAbilAddPoints(unit lp_1, string lp_2, int lp_3);
0x9A8 - int UnitLearnAbilGetPoints(unit lp_1, string lp_2, bool lp_3);
0x9A9 - int UnitInventoryContainer(unit lp_1);
0x9AA - void UnitInventoryContainerOpen(playergroup lp_1, unit lp_2, int lp_3, bool lp_4);
0x9AB - int UnitInventoryCount(unit lp_1, int lp_2);
0x9AC - unit UnitInventoryCreate(unit lp_1, string lp_2);
0x9AD - bool UnitInventoryAdd(unit lp_1, unit lp_2);
0x9AE - unitgroup UnitInventoryGroup(unit lp_1);
0x9AF - int UnitInventoryIndex(unit lp_1);
0x9B0 - unit UnitInventoryItem(unit lp_1, int lp_2);
0x9B1 - unit UnitInventoryLastCreated();
0x9B2 - void UnitInventoryMove(unit lp_1, int lp_2, int lp_3);
0x9B3 - void UnitInventoryRemove(unit lp_1);
0x9B4 - void UnitInventoryDrop(unit lp_1);
0x9B5 - int UnitInventorySlot(unit lp_1);
0x9B6 - unit UnitInventoryUnit(unit lp_1);
0x9B7 - bool UnitLootDropUnit(unit lp_1, string lp_2, int lp_3);
0x9B8 - bool UnitLootDropPoint(int lp_1, point lp_2, string lp_3, int lp_4);
0x9B9 - unit UnitLootLastCreated();
0x9BA - unitgroup UnitLootLastCreatedGroup();
0x9BB - void UnitWeaponAdd(unit lp_1, string lp_2, string lp_3);
0x9BC - int UnitWeaponCount(unit lp_1);
0x9BD - bool UnitWeaponCheck(unit lp_1, int lp_2, int lp_3);
0x9BE - string UnitWeaponGet(unit lp_1, int lp_2);
0x9BF - bool UnitWeaponIsEnabled(unit lp_1, int lp_2);
0x9C0 - fixed UnitWeaponPeriod(unit lp_1, int lp_2);
0x9C1 - fixed UnitWeaponRange(unit lp_1, int lp_2);
0x9C2 - fixed UnitWeaponPeriodRemaining(unit lp_1, int lp_2);
0x9C3 - void UnitWeaponSetPeriodRemaining(unit lp_1, int lp_2, fixed lp_3);
0x9C4 - void UnitWeaponRemove(unit lp_1, string lp_2);
0x9C5 - bool UnitWeaponsPlaneTest(unit lp_1, int lp_2);
0x9C6 - fixed UnitWeaponDamage(unit lp_1, int lp_2, int lp_3, bool lp_4);
0x9C7 - fixed UnitWeaponSpeedMultiplier(unit lp_1, int lp_2);
0x9C8 - bool UnitCanAttackTarget(unit lp_1, unit lp_2);
0x9C9 - bool UnitInRangeAndAbleToAttackTarget(unit lp_1, unit lp_2);
0x9CA - fixed UnitXPTotal(unit lp_1);
0x9CB - int UnitLevel(unit lp_1);
0x9CC - fixed UnitXPGetCurrentXP(unit lp_1, string lp_2);
0x9CD - void UnitXPAddXP(unit lp_1, string lp_2, fixed lp_3);
0x9CE - void UnitXPSetCurrentXP(unit lp_1, string lp_2, fixed lp_3);
0x9CF - int UnitXPGetXPForLevel(unit lp_1, string lp_2, int lp_3);
0x9D0 - void UnitXPSetXPForLevel(unit lp_1, string lp_2, int lp_3, int lp_4);
0x9D1 - int UnitXPGetCurrentLevel(unit lp_1, string lp_2);
0x9D2 - void UnitXPSetCurrentLevel(unit lp_1, string lp_2, int lp_3);
0x9D3 - int UnitXPGetNumLevels(unit lp_1, string lp_2);
0x9D4 - string UnitTypeFromString(string lp_1);
0x9D5 - text UnitTypeGetName(string lp_1);
0x9D6 - string UnitTypeGetGenderCode(string lp_1);
0x9D7 - fixed UnitTypeGetProperty(string lp_1, int lp_2);
0x9D8 - int UnitTypeGetCost(string lp_1, int lp_2);
0x9D9 - bool UnitTypeTestFlag(string lp_1, int lp_2);
0x9DA - bool UnitTypeTestAttribute(string lp_1, int lp_2);
0x9DB - bool UnitTypeIsAffectedByUpgrade(string lp_1, string lp_2);
0x9DC - void UnitTypeAnimationLoad(string lp_1, string lp_2);
0x9DD - void UnitTypeAnimationLoadOverriding(string lp_1, string lp_2);
0x9DE - void UnitTypeAnimationUnload(string lp_1, string lp_2);
0x9DF - int UnitTypeMoveBlockersFromPoint(string lp_1, int lp_2, point lp_3, fixed lp_4);
0x9E0 - int UnitTypeMoveBlockersFromUnit(string lp_1, int lp_2, unit lp_3, fixed lp_4);
0x9E1 - point UnitTypePlacementFromPoint(string lp_1, int lp_2, point lp_3, fixed lp_4);
0x9E2 - point UnitTypePlacementFromUnit(string lp_1, int lp_2, unit lp_3, fixed lp_4);
0x9E3 - point UnitTypePlacementTestsFromPoint(string lp_1, int lp_2, point lp_3, fixed lp_4, int lp_5);
0x9E4 - point UnitTypePlacementTestsFromUnit(string lp_1, int lp_2, unit lp_3, fixed lp_4, int lp_5);
0x9E5 - bool UnitPathableToPoint(unit lp_1, point lp_2, fixed lp_3, fixed lp_4);
0x9E6 - bool UnitPathableToUnit(unit lp_1, unit lp_2, fixed lp_3, fixed lp_4);
0x9E7 - void UnitEventSetNullVariableInvalid(bool lp_1);
0x9E8 - void TriggerAddEventUnitCreated(trigger lp_1, unitref lp_2, string lp_3, string lp_4);
0x9E9 - void TriggerAddEventUnitRemoved(trigger lp_1, unitref lp_2);
0x9EA - void TriggerAddEventUnitDied(trigger lp_1, unitref lp_2);
0x9EB - void TriggerAddEventUnitAcquiredTarget(trigger lp_1, unitref lp_2);
0x9EC - void TriggerAddEventUnitStartedAttack(trigger lp_1, unitref lp_2);
0x9ED - void TriggerAddEventUnitAttacked(trigger lp_1, unitref lp_2);
0x9EE - void TriggerAddEventUnitStartedAttack2(trigger lp_1, unitref lp_2, string lp_3);
0x9EF - void TriggerAddEventUnitAttacked2(trigger lp_1, unitref lp_2, string lp_3);
0x9F0 - void TriggerAddEventUnitAttributeChange(trigger lp_1, unitref lp_2);
0x9F1 - void TriggerAddEventUnitDamageAbsorbed(trigger lp_1, unitref lp_2, string lp_3);
0x9F2 - void TriggerAddEventUnitDamaged(trigger lp_1, unitref lp_2, int lp_3, int lp_4, string lp_5);
0x9F3 - void TriggerAddEventUnitHealed(trigger lp_1, unitref lp_2, int lp_3, string lp_4);
0x9F4 - void TriggerAddEventUnitSpendVital(trigger lp_1, unitref lp_2, int lp_3);
0x9F5 - void TriggerAddEventUnitBecomesIdle(trigger lp_1, unitref lp_2, bool lp_3);
0x9F6 - void TriggerAddEventUnitInventoryChange(trigger lp_1, unitref lp_2, int lp_3, unitref lp_4);
0x9F7 - unit EventUnit();
0x9F8 - unit EventUnitTarget();
0x9F9 - string EventUnitGetWeapon();
0x9FA - unit EventUnitGetItem();
0x9FB - string EventUnitGetItemType();
0x9FC - unit EventUnitCreatedUnit();
0x9FD - string EventUnitCreatedAbil();
0x9FE - string EventUnitCreatedBehavior();
0x9FF - fixed EventUnitDamageAttempted();
0xA00 - fixed EventUnitDamageAttemptedVitals();
0xA01 - fixed EventUnitDamageAmount();
0xA02 - fixed EventUnitDamageAbsorbed();
0xA03 - fixed EventUnitDamageBehaviorShield();
0xA04 - fixed EventUnitDamageVitalsLeeched(int lp_1);
0xA05 - int EventUnitDamageKillXP();
0xA06 - unit EventUnitDamageSourceUnit();
0xA07 - int EventUnitDamageSourcePlayer();
0xA08 - point EventUnitDamageSourcePoint();
0xA09 - bool EventUnitDamageDeathCheck(int lp_1);
0xA0A - string EventUnitDamageEffect();
0xA0B - unit EventUnitHealLaunchUnit();
0xA0C - int EventUnitHealLaunchPlayer();
0xA0D - int EventUnitHealVital();
0xA0E - fixed EventUnitHealAmount();
0xA0F - string EventUnitHealEffect();
0xA10 - int EventUnitSpentVitalVital();
0xA11 - fixed EventUnitSpentVitalAmount();
0xA12 - int EventUnitInventoryChange();
0xA13 - unit EventUnitInventoryItem();
0xA14 - int EventUnitInventoryItemContainer();
0xA15 - int EventUnitInventoryItemSlot();
0xA16 - point EventUnitInventoryItemTargetPoint();
0xA17 - unit EventUnitInventoryItemTargetUnit();
0xA18 - void TriggerAddEventUnitProperty(trigger lp_1, unitref lp_2, int lp_3);
0xA19 - int EventUnitProperty();
0xA1A - int EventUnitPropertyChangeInt();
0xA1B - fixed EventUnitPropertyChangeFixed();
0xA1C - void TriggerAddEventUnitRegion(trigger lp_1, unitref lp_2, region lp_3, bool lp_4);
0xA1D - void TriggerAddEventUnitRange(trigger lp_1, unitref lp_2, unit lp_3, fixed lp_4, bool lp_5);
0xA1E - void TriggerAddEventUnitRangePoint(trigger lp_1, unitref lp_2, point lp_3, fixed lp_4, bool lp_5);
0xA1F - void TriggerAddEventUnitCargo(trigger lp_1, unitref lp_2, bool lp_3);
0xA20 - region EventUnitRegion();
0xA21 - unit EventUnitRangeUnit();
0xA22 - unit EventUnitCargo();
0xA23 - void TriggerAddEventUnitSelected(trigger lp_1, unitref lp_2, int lp_3, bool lp_4);
0xA24 - void TriggerAddEventUnitClick(trigger lp_1, unitref lp_2, int lp_3);
0xA25 - void TriggerAddEventUnitHighlight(trigger lp_1, unitref lp_2, int lp_3, bool lp_4);
0xA26 - void TriggerAddEventUnitChangeOwner(trigger lp_1, unitref lp_2);
0xA27 - int EventUnitOwnerOld();
0xA28 - int EventUnitOwnerNew();
0xA29 - void TriggerAddEventUnitOrder(trigger lp_1, unitref lp_2, abilcmd lp_3);
0xA2A - order EventUnitOrder();
0xA2B - void TriggerAddEventUnitAbility(trigger lp_1, unitref lp_2, abilcmd lp_3, int lp_4, bool lp_5);
0xA2C - void TriggerAddEventUnitAbilityAutoCastChange(trigger lp_1, unitref lp_2, abilcmd lp_3, int lp_4, bool lp_5);
0xA2D - abilcmd EventUnitAbility();
0xA2E - int EventUnitAbilityStage();
0xA2F - point EventUnitTargetPoint();
0xA30 - unit EventUnitTargetUnit();
0xA31 - unit EventUnitAbilityOtherUnit();
0xA32 - void TriggerAddEventUnitBehaviorChange(trigger lp_1, unitref lp_2, string lp_3, int lp_4);
0xA33 - void TriggerAddEventUnitBehaviorChangeFromCategory(trigger lp_1, unitref lp_2, int lp_3, int lp_4);
0xA34 - void TriggerAddEventUnitGainExperience(trigger lp_1, unitref lp_2);
0xA35 - void TriggerAddEventUnitGainLevel(trigger lp_1, unitref lp_2);
0xA36 - string EventUnitBehavior();
0xA37 - int EventUnitBehaviorChange();
0xA38 - fixed EventUnitXPDelta();
0xA39 - unit EventUnitVictimUnit();
0xA3A - unit EventUnitItemUsed();
0xA3B - string EventUnitEffectUsed();
0xA3C - int EventUnitAttributePoints();
0xA3D - void TriggerAddEventUnitArmMagazineProgress(trigger lp_1, unitref lp_2, int lp_3);
0xA3E - void TriggerAddEventUnitConstructProgress(trigger lp_1, unitref lp_2, int lp_3);
0xA3F - void TriggerAddEventUnitLearnProgress(trigger lp_1, unitref lp_2, int lp_3);
0xA40 - void TriggerAddEventUnitResearchProgress(trigger lp_1, unitref lp_2, int lp_3);
0xA41 - void TriggerAddEventUnitReviveProgress(trigger lp_1, unitref lp_2, int lp_3);
0xA42 - void TriggerAddEventUnitSpecializeProgress(trigger lp_1, unitref lp_2, int lp_3);
0xA43 - void TriggerAddEventUnitTrainProgress(trigger lp_1, unitref lp_2, int lp_3);
0xA44 - string EventUnitProgressObjectType();
0xA45 - unit EventUnitProgressUnit();
0xA46 - void TriggerAddEventUnitPowerup(trigger lp_1, unitref lp_2);
0xA47 - unit EventUnitPowerupUnit();
0xA48 - void TriggerAddEventUnitRevive(trigger lp_1, unitref lp_2);
0xA49 - string PickedExclusiveMapTag();
0xA4A - int UnitIdealWorkerCount(unit lp_1);
0xA4B - int UnitCurrentWorkerCount(unit lp_1);
0xA4C - unitfilter UnitFilter(int lp_1, int lp_2, int lp_3, int lp_4);
0xA4D - unitfilter UnitFilterStr(string lp_1);
0xA4E - void UnitFilterSetState(unitfilter lp_1, int lp_2, int lp_3);
0xA4F - int UnitFilterGetState(unitfilter lp_1, int lp_2);
0xA50 - bool UnitFilterMatch(unit lp_1, int lp_2, unitfilter lp_3);
0xA51 - unitgroup UnitGroupEmpty();
0xA52 - unitgroup UnitGroupCopy(unitgroup lp_1);
0xA53 - unitgroup UnitGroupFromId(int lp_1);
0xA54 - int UnitObjectGroupFromUnitGroup(unitgroup lp_1, int lp_2);
0xA55 - void UnitObjectGroupCallForHelp(unit lp_1, unit lp_2);
0xA56 - unitgroup UnitGroupAlliance(int lp_1, int lp_2, region lp_3, unitfilter lp_4, int lp_5);
0xA57 - int UnitCountAlliance(int lp_1, int lp_2, region lp_3, unitfilter lp_4, int lp_5);
0xA58 - unitgroup UnitGroup(string lp_1, int lp_2, region lp_3, unitfilter lp_4, int lp_5);
0xA59 - int UnitCount(string lp_1, int lp_2, region lp_3, unitfilter lp_4, int lp_5);
0xA5A - unitgroup UnitGroupSearch(string lp_1, int lp_2, point lp_3, fixed lp_4, unitfilter lp_5, int lp_6);
0xA5B - unitgroup UnitGroupFilter(string lp_1, int lp_2, unitgroup lp_3, unitfilter lp_4, int lp_5);
0xA5C - unitgroup UnitGroupFilterAlliance(unitgroup lp_1, int lp_2, int lp_3, int lp_4);
0xA5D - unitgroup UnitGroupFilterPlayer(unitgroup lp_1, int lp_2, int lp_3);
0xA5E - unitgroup UnitGroupFilterPlane(unitgroup lp_1, int lp_2, int lp_3);
0xA5F - unitgroup UnitGroupFilterRegion(unitgroup lp_1, region lp_2, int lp_3);
0xA60 - unitgroup UnitGroupFilterThreat(unitgroup lp_1, unit lp_2, string lp_3, int lp_4);
0xA61 - unitgroup UnitGroupIdle(int lp_1, bool lp_2);
0xA62 - point UnitGroupCenterOfGroup(unitgroup lp_1);
0xA63 - unit UnitGroupClosestToPoint(unitgroup lp_1, point lp_2);
0xA64 - void UnitGroupClear(unitgroup lp_1);
0xA65 - void UnitGroupAdd(unitgroup lp_1, unit lp_2);
0xA66 - void UnitGroupAddUnitGroup(unitgroup lp_1, unitgroup lp_2);
0xA67 - void UnitGroupRemove(unitgroup lp_1, unit lp_2);
0xA68 - void UnitGroupRemoveUnitGroup(unitgroup lp_1, unitgroup lp_2);
0xA69 - bool UnitGroupIssueOrder(unitgroup lp_1, order lp_2, int lp_3);
0xA6A - void UnitGroupWaitUntilIdle(unitgroup lp_1, int lp_2, bool lp_3);
0xA6B - int UnitGroupCount(unitgroup lp_1, int lp_2);
0xA6C - unit UnitGroupUnit(unitgroup lp_1, int lp_2);
0xA6D - unit UnitGroupUnitFromEnd(unitgroup lp_1, int lp_2);
0xA6E - unit UnitGroupRandomUnit(unitgroup lp_1, int lp_2);
0xA6F - bool UnitGroupHasUnit(unitgroup lp_1, unit lp_2);
0xA70 - bool UnitGroupTestPlane(unitgroup lp_1, int lp_2);
0xA71 - unit UnitGroupNearestUnit(unitgroup lp_1, point lp_2);
0xA72 - void UnitGroupPauseAll(unitgroup lp_1, bool lp_2);
0xA73 - unitref UnitRefFromUnit(unit lp_1);
0xA74 - unitref UnitRefFromVariable(string lp_1);
0xA75 - unit UnitRefToUnit(unitref lp_1);
0xA76 - void UnitSelect(unit lp_1, int lp_2, bool lp_3);
0xA77 - void UnitGroupSelect(unitgroup lp_1, int lp_2, bool lp_3);
0xA78 - void UnitClearSelection(int lp_1);
0xA79 - bool UnitIsSelected(unit lp_1, int lp_2);
0xA7A - unitgroup UnitGroupSelected(int lp_1);
0xA7B - unitgroup UnitSubgroupSelected(int lp_1);
0xA7C - int UnitSubgroupIndexSelected(int lp_1);
0xA7D - void UnitSubgroupIndexNext(int lp_1);
0xA7E - void UnitSubgroupIndexPrevious(int lp_1);
0xA7F - void UnitFlashSelection(unit lp_1, fixed lp_2);
0xA80 - unitgroup UnitControlGroup(int lp_1, int lp_2);
0xA81 - void UnitControlGroupAddUnit(int lp_1, int lp_2, unit lp_3);
0xA82 - void UnitControlGroupAddUnits(int lp_1, int lp_2, unitgroup lp_3);
0xA83 - void UnitControlGroupRemoveUnit(int lp_1, int lp_2, unit lp_3);
0xA84 - void UnitControlGroupRemoveUnits(int lp_1, int lp_2, unitgroup lp_3);
0xA85 - void UnitControlGroupClear(int lp_1, int lp_2);
0xA86 - int UserDataInstanceCount(string lp_1);
0xA87 - string UserDataInstance(string lp_1, int lp_2);
0xA88 - int UserDataFieldCount(string lp_1);
0xA89 - string UserDataField(string lp_1, int lp_2);
0xA8A - int UserDataFieldType(string lp_1, string lp_2);
0xA8B - int UserDataFieldValueCount(string lp_1, string lp_2);
0xA8C - bool UserDataFieldIsModifiable(string lp_1, string lp_2);
0xA8D - abilcmd UserDataGetAbilCmd(string lp_1, string lp_2, string lp_3, int lp_4);
0xA8E - string UserDataGetActor(string lp_1, string lp_2, string lp_3, int lp_4);
0xA8F - color UserDataGetColor(string lp_1, string lp_2, string lp_3, int lp_4);
0xA90 - int UserDataGetCompare(string lp_1, string lp_2, string lp_3, int lp_4);
0xA91 - fixed UserDataGetFixed(string lp_1, string lp_2, string lp_3, int lp_4);
0xA92 - string UserDataGetGameLink(string lp_1, string lp_2, string lp_3, int lp_4);
0xA93 - string UserDataGetImagePath(string lp_1, string lp_2, string lp_3, int lp_4);
0xA94 - int UserDataGetImageEdge(string lp_1, string lp_2, string lp_3, int lp_4);
0xA95 - string UserDataGetImageAttachPoint(string lp_1, string lp_2, string lp_3, int lp_4);
0xA96 - int UserDataGetInt(string lp_1, string lp_2, string lp_3, int lp_4);
0xA97 - string UserDataGetModel(string lp_1, string lp_2, string lp_3, int lp_4);
0xA98 - string UserDataGetMovie(string lp_1, string lp_2, string lp_3, int lp_4);
0xA99 - string UserDataGetSound(string lp_1, string lp_2, string lp_3, int lp_4);
0xA9A - string UserDataGetString(string lp_1, string lp_2, string lp_3, int lp_4);
0xA9B - text UserDataGetText(string lp_1, string lp_2, string lp_3, int lp_4);
0xA9C - string UserDataGetUnit(string lp_1, string lp_2, string lp_3, int lp_4);
0xA9D - string UserDataGetUpgrade(string lp_1, string lp_2, string lp_3, int lp_4);
0xA9E - string UserDataGetUserType(string lp_1, string lp_2, string lp_3, int lp_4);
0xA9F - string UserDataGetUserInstance(string lp_1, string lp_2, string lp_3, int lp_4);
0xAA0 - void UserDataSetAbilCmd(string lp_1, string lp_2, string lp_3, int lp_4, abilcmd lp_5);
0xAA1 - void UserDataSetActor(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAA2 - void UserDataSetColor(string lp_1, string lp_2, string lp_3, int lp_4, color lp_5);
0xAA3 - void UserDataSetCompare(string lp_1, string lp_2, string lp_3, int lp_4, int lp_5);
0xAA4 - void UserDataSetFixed(string lp_1, string lp_2, string lp_3, int lp_4, fixed lp_5);
0xAA5 - void UserDataSetGameLink(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAA6 - void UserDataSetImagePath(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAA7 - void UserDataSetImageEdge(string lp_1, string lp_2, string lp_3, int lp_4, int lp_5);
0xAA8 - void UserDataSetImageAttachPoint(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAA9 - void UserDataSetInt(string lp_1, string lp_2, string lp_3, int lp_4, int lp_5);
0xAAA - void UserDataSetModel(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAAB - void UserDataSetMovie(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAAC - void UserDataSetSound(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAAD - void UserDataSetString(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAAE - void UserDataSetText(string lp_1, string lp_2, string lp_3, int lp_4, text lp_5);
0xAAF - void UserDataSetUnit(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAB0 - void UserDataSetUpgrade(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5);
0xAB1 - void UserDataSetUser(string lp_1, string lp_2, string lp_3, int lp_4, string lp_5, string lp_6);
0xAB2 - void UserDataResetValue(string lp_1, string lp_2, string lp_3, int lp_4);
0xAB3 - void UserDataResetInstance(string lp_1, string lp_2);
0xAB4 - void UserDataResetType(string lp_1);
0xAB5 - void UserDataResetAll();
0xAB6 - void UserDataSaveInstance(string lp_1, string lp_2, bank lp_3, string lp_4);
0xAB7 - void UserDataLoadInstance(string lp_1, string lp_2, bank lp_3, string lp_4);
0xAB8 - void UserDataSaveType(string lp_1, bank lp_2, string lp_3);
0xAB9 - void UserDataLoadType(string lp_1, bank lp_2, string lp_3);
0xABA - string UserDataTypeFromReference(string lp_1);
0xABB - string UserDataInstanceFromReference(string lp_1);
0xABC - void UISetMode(playergroup lp_1, int lp_2, fixed lp_3);
0xABD - void UISetMinimumLetterboxHeight(int lp_1);
0xABE - void UISetWorldVisible(playergroup lp_1, bool lp_2);
0xABF - void UISetCursorVisible(playergroup lp_1, bool lp_2);
0xAC0 - void UISetCursorAutoHide(playergroup lp_1, bool lp_2, fixed lp_3);
0xAC1 - void UISetHotkeyProfile(playergroup lp_1, string lp_2);
0xAC2 - text UIHotKeyString(int lp_1, int lp_2, bool lp_3, bool lp_4);
0xAC3 - void UIDisplayMessage(playergroup lp_1, int lp_2, text lp_3);
0xAC4 - void UIClearMessages(playergroup lp_1, int lp_2);
0xAC5 - void UIShowCinematicText(playergroup lp_1, text lp_2, fixed lp_3, fixed lp_4, soundlink lp_5);
0xAC6 - void UIHideCinematicText(playergroup lp_1);
0xAC7 - void UIShowTextCrawl(playergroup lp_1, text lp_2, text lp_3, fixed lp_4, soundlink lp_5, soundlink lp_6);
0xAC8 - void UIHideTextCrawl(playergroup lp_1);
0xAC9 - void UIUnitColorStyleOverride(playergroup lp_1, int lp_2);
0xACA - void UIUnitColorStyleClearOverride(playergroup lp_1);
0xACB - void UIFlyerHelperOverride(playergroup lp_1, int lp_2);
0xACC - void UIFlyerHelperClearOverride(playergroup lp_1);
0xACD - void UIStatusBarOverride(playergroup lp_1, int lp_2);
0xACE - void UIStatusBarClearOverride(playergroup lp_1);
0xACF - void UISetAchievementToastStyle(playergroup lp_1, int lp_2);
0xAD0 - void UISetNextLoadingScreen(string lp_1, text lp_2, text lp_3, text lp_4, text lp_5, bool lp_6);
0xAD1 - void UISetNextLoadingScreenImageScale(int lp_1);
0xAD2 - void UISetNextLoadingScreenTextPosition(int lp_1, int lp_2, int lp_3, int lp_4, int lp_5);
0xAD3 - void UISetRestartLoadingScreen(text lp_1);
0xAD4 - void UIAlert(string lp_1, int lp_2, text lp_3, string lp_4);
0xAD5 - void UIAlertPoint(string lp_1, int lp_2, text lp_3, string lp_4, point lp_5);
0xAD6 - void UIAlertUnit(string lp_1, int lp_2, text lp_3, string lp_4, unit lp_5);
0xAD7 - void UIAlertClear(int lp_1);
0xAD8 - void UISetAlertTypeVisible(playergroup lp_1, string lp_2, bool lp_3);
0xAD9 - void UISetFrameVisible(playergroup lp_1, int lp_2, bool lp_3);
0xADA - bool UIFrameVisible(int lp_1, int lp_2);
0xADB - void UISetGameMenuItemVisible(playergroup lp_1, int lp_2, bool lp_3);
0xADC - bool UIGameMenuItemVisible(int lp_1, int lp_2);
0xADD - void UISetGameMenuItemText(playergroup lp_1, int lp_2, text lp_3);
0xADE - void UISetGameMenuItemShortcut(playergroup lp_1, int lp_2, text lp_3);
0xADF - void UIClearCustomMenuItemList(playergroup lp_1);
0xAE0 - void UISetCustomMenuItemVisible(playergroup lp_1, int lp_2, bool lp_3);
0xAE1 - bool UICustomMenuItemVisible(int lp_1, int lp_2);
0xAE2 - void UISetCustomMenuItemShortcut(playergroup lp_1, int lp_2, text lp_3);
0xAE3 - void UISetCustomMenuItemText(playergroup lp_1, int lp_2, text lp_3);
0xAE4 - void UIShowStandardMenu(playergroup lp_1);
0xAE5 - void UIShowCustomMenu(playergroup lp_1, text lp_2);
0xAE6 - void UIShowCustomDialog(playergroup lp_1, int lp_2, text lp_3, text lp_4, bool lp_5);
0xAE7 - void UISetResourceTradeCountdownTime(int lp_1);
0xAE8 - void UISetResourceTradingAllowed(int lp_1, bool lp_2);
0xAE9 - void UISetResourceTradingMinorStep(int lp_1, int lp_2);
0xAEA - void UISetResourceTradingMajorStep(int lp_1, int lp_2);
0xAEB - void UISetButtonHighlighted(playergroup lp_1, abilcmd lp_2, bool lp_3);
0xAEC - void UISetButtonFaceHighlighted(playergroup lp_1, string lp_2, bool lp_3);
0xAED - void UISetMiniMapBackGroundColor(color lp_1);
0xAEE - void UISetMiniMapCameraFoVVisible(bool lp_1);
0xAEF - void UISetMiniMapBounds(playergroup lp_1, region lp_2);
0xAF0 - void UISetCommandAllowed(playergroup lp_1, int lp_2, bool lp_3);
0xAF1 - void UISetCommandDisallowedMessage(playergroup lp_1, text lp_2);
0xAF2 - void UISetHotkeyAllowed(playergroup lp_1, int lp_2, bool lp_3);
0xAF3 - void UISetDragSelectEnabled(playergroup lp_1, bool lp_2);
0xAF4 - void UISetChallengeMode(playergroup lp_1, bool lp_2);
0xAF5 - void UISetChallengeScoreText(playergroup lp_1, string lp_2, text lp_3);
0xAF6 - void UISetChallengeHighScore(playergroup lp_1, string lp_2, int lp_3);
0xAF7 - int UIGetChallengeHighScore(int lp_1, string lp_2);
0xAF8 - void UISetChallengeCompleted(playergroup lp_1, string lp_2, bool lp_3);
0xAF9 - void UISetBattleNetButtonOffset(playergroup lp_1, int lp_2, int lp_3);
0xAFA - void UIClearBattleNetButtonOffset(playergroup lp_1);
0xAFB - void UISetResourceVisible(playergroup lp_1, int lp_2, bool lp_3);
0xAFC - void UISetSelectionTypeEnabled(playergroup lp_1, int lp_2, bool lp_3);
0xAFD - void UILaunchNydusLink(playergroup lp_1, int lp_2);
0xAFE - void UIMessageLogPanelSetVisible(playergroup lp_1, bool lp_2);
0xAFF - void UISetTargetingOrder(playergroup lp_1, unitgroup lp_2, order lp_3, bool lp_4);
0xB00 - void TriggerAddEventAbortMission(trigger lp_1, int lp_2);
0xB01 - void TriggerAddEventCustomDialogDismissed(trigger lp_1, int lp_2, int lp_3);
0xB02 - void TriggerAddEventGameMenuItemSelected(trigger lp_1, int lp_2, int lp_3);
0xB03 - void TriggerAddEventMouseClicked(trigger lp_1, int lp_2, int lp_3, bool lp_4);
0xB04 - void TriggerAddEventMouseMoved(trigger lp_1, int lp_2);
0xB05 - void TriggerAddEventMouseWheel(trigger lp_1, int lp_2);
0xB06 - void TriggerAddEventKeyPressed(trigger lp_1, int lp_2, int lp_3, bool lp_4, int lp_5, int lp_6, int lp_7);
0xB07 - void TriggerAddEventHotkeyPressed(trigger lp_1, int lp_2, int lp_3, bool lp_4);
0xB08 - void TriggerAddEventButtonPressed(trigger lp_1, int lp_2, string lp_3);
0xB09 - void TriggerAddEventGameCreditsFinished(trigger lp_1, int lp_2);
0xB0A - void TriggerAddEventTargetModeUpdate(trigger lp_1, int lp_2, abilcmd lp_3, int lp_4);
0xB0B - void TriggerAddEventResourceRequest(trigger lp_1, int lp_2);
0xB0C - void TriggerAddEventResourceTrade(trigger lp_1, int lp_2, int lp_3);
0xB0D - void TriggerAddEventCommandError(trigger lp_1, int lp_2, int lp_3, abilcmd lp_4);
0xB0E - void TriggerAddEventAlert(trigger lp_1, int lp_2, string lp_3);
0xB0F - int EventCustomDialogResult();
0xB10 - int EventGameMenuItemSelected();
0xB11 - int EventMouseClickedButton();
0xB12 - int EventMouseClickedPosXUI();
0xB13 - int EventMouseClickedPosYUI();
0xB14 - fixed EventMouseClickedPosXWorld();
0xB15 - fixed EventMouseClickedPosYWorld();
0xB16 - fixed EventMouseClickedPosZWorld();
0xB17 - int EventMouseMovedPosXUI();
0xB18 - int EventMouseMovedPosYUI();
0xB19 - fixed EventMouseMovedPosXWorld();
0xB1A - fixed EventMouseMovedPosYWorld();
0xB1B - fixed EventMouseMovedPosZWorld();
0xB1C - fixed EventMouseWheelSpin();
0xB1D - int EventHotkeyPressed();
0xB1E - int EventKeyPressed();
0xB1F - bool EventKeyShift();
0xB20 - bool EventKeyControl();
0xB21 - bool EventKeyAlt();
0xB22 - string EventButtonPressed();
0xB23 - abilcmd EventTargetModeAbilCmd();
0xB24 - int EventTargetModeState();
0xB25 - int EventResourceRequestAmount(int lp_1);
0xB26 - int EventResourceTradeRecipient();
0xB27 - int EventResourceTradeAmount(int lp_1);
0xB28 - int EventCommandErrorValue();
0xB29 - abilcmd EventCommandErrorAbilCmd();
0xB2A - string EventAlert();
0xB2B - int ValidatorExecute(string lp_1, unit lp_2, unit lp_3);
0xB2C - void VisEnable(int lp_1, bool lp_2);
0xB2D - bool VisIsEnabled(int lp_1);
0xB2E - bool VisIsVisibleForPlayer(int lp_1, point lp_2);
0xB2F - fixed VisGetFoWAlpha(int lp_1);
0xB30 - void VisSetFoWAlpha(int lp_1, fixed lp_2);
0xB31 - void VisResetFoWAlpha(int lp_1);
0xB32 - void VisExploreArea(int lp_1, region lp_2, bool lp_3, bool lp_4);
0xB33 - void VisFillArea(int lp_1, region lp_2, int lp_3, bool lp_4);
0xB34 - void VisRevealArea(int lp_1, region lp_2, fixed lp_3, bool lp_4);
0xB35 - revealer VisRevealerCreate(int lp_1, region lp_2);
0xB36 - revealer VisRevealerLastCreated();
0xB37 - void VisRevealerDestroy(revealer lp_1);
0xB38 - void VisRevealerEnable(revealer lp_1, bool lp_2);
0xB39 - void VisRevealerUpdate(revealer lp_1);
